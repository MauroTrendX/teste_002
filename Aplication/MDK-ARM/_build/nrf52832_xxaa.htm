<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Mar 08 15:06:12 2021
<BR><P>
<H3>Maximum Stack Usage =       1512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; nrf_ble_lesc_request_handler &rArr; compute_and_give_dhkey &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[431]">ocrypto_bigint_add128</a>
 <LI><a href="#[432]">ocrypto_bigint_sub128</a>
 <LI><a href="#[433]">ocrypto_bigint_add256</a>
 <LI><a href="#[eb]">ocrypto_bigint_sub256</a>
 <LI><a href="#[dd]">ocrypto_bigint_cadd256</a>
 <LI><a href="#[434]">ocrypto_bigint_csub256</a>
 <LI><a href="#[bc]">ocrypto_bigint_cswap256</a>
 <LI><a href="#[103]">ocrypto_bigint_mul128</a>
 <LI><a href="#[435]">ocrypto_bigint_sqr256</a>
 <LI><a href="#[436]">ocrypto_bigint_mul256</a>
 <LI><a href="#[e9]">ocrypto_constant_time_equal</a>
 <LI><a href="#[f2]">ocrypto_constant_time_is_zero</a>
 <LI><a href="#[be]">ocrypto_constant_time_copy</a>
 <LI><a href="#[102]">ocrypto_constant_time_fill_zero</a>
 <LI><a href="#[e7]">ocrypto_mod_p256_add</a>
 <LI><a href="#[f1]">ocrypto_mod_p256_sub</a>
 <LI><a href="#[e6]">ocrypto_mod_p256_square</a>
 <LI><a href="#[e8]">ocrypto_mod_p256_mul</a>
 <LI><a href="#[d9]">ocrypto_mod25519_add</a>
 <LI><a href="#[db]">ocrypto_mod25519_sub</a>
 <LI><a href="#[d8]">ocrypto_mod25519_square</a>
 <LI><a href="#[d2]">ocrypto_mod25519_mul</a>
 <LI><a href="#[e0]">ocrypto_mod25519_mul121666</a>
 <LI><a href="#[101]">ocrypto_mod25519_freeze</a>
 <LI><a href="#[de]">ocrypto_curve25519_scalarmult</a>
 <LI><a href="#[e3]">ocrypto_curve25519_scalarmult_base</a>
 <LI><a href="#[e4]">ocrypto_curve_p256_from64bytes</a>
 <LI><a href="#[ea]">ocrypto_curve_p256_scalarmult</a>
 <LI><a href="#[f3]">ocrypto_curve_p256_scalarmult_base</a>
 <LI><a href="#[f4]">ocrypto_curve_p256_to32bytes</a>
 <LI><a href="#[f6]">ocrypto_curve_p256_to64bytes</a>
 <LI><a href="#[f7]">ocrypto_ecdh_p256_common_secret</a>
 <LI><a href="#[f9]">ocrypto_ecdh_p256_public_key</a>
 <LI><a href="#[fa]">ocrypto_ed25519_public_key</a>
 <LI><a href="#[fe]">ocrypto_ge25519_pack</a>
 <LI><a href="#[fd]">ocrypto_ge25519_scalarmult_base</a>
 <LI><a href="#[df]">ocrypto_mod25519_fromBytes</a>
 <LI><a href="#[ff]">ocrypto_mod25519_getsign</a>
 <LI><a href="#[dc]">ocrypto_mod25519_init</a>
 <LI><a href="#[da]">ocrypto_mod25519_neg</a>
 <LI><a href="#[e1]">ocrypto_mod25519_power</a>
 <LI><a href="#[e2]">ocrypto_mod25519_toBytes</a>
 <LI><a href="#[ed]">ocrypto_mod_p256_cneg</a>
 <LI><a href="#[e5]">ocrypto_mod_p256_fromBytes</a>
 <LI><a href="#[f0]">ocrypto_mod_p256_invert</a>
 <LI><a href="#[f5]">ocrypto_mod_p256_toBytes</a>
 <LI><a href="#[fc]">ocrypto_sc25519_from32bytes</a>
 <LI><a href="#[100]">ocrypto_sc25519_window4</a>
 <LI><a href="#[f8]">ocrypto_sc_p256_from32bytes</a>
 <LI><a href="#[fb]">ocrypto_sha512</a>
 <LI><a href="#[106]">ocrypto_sha512_loop1</a>
 <LI><a href="#[107]">ocrypto_sha512_loop2</a>
 <LI><a href="#[105]">sha512_blocks</a>
 <LI><a href="#[104]">sha512_blocks.constprop.1</a>
 <LI><a href="#[ec]">p256_zdblu</a>
 <LI><a href="#[ef]">p256_zaddc</a>
 <LI><a href="#[ee]">p256_zaddu</a>
 <LI><a href="#[d3]">mixaddsub_p1p1</a>
 <LI><a href="#[d7]">dbl_p1p1</a>
 <LI><a href="#[d1]">get_entry</a>
 <LI><a href="#[d6]">get_entry.constprop.3</a>
 <LI><a href="#[d0]">add_entry.constprop.0</a>
 <LI><a href="#[d4]">add_entry.constprop.1</a>
 <LI><a href="#[d5]">add_entry.constprop.2</a>
 <LI><a href="#[bd]">cswap64</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[1d]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[138]">nrf_log_frontend_std_0</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[369]">std_n</a><BR>
 <LI><a href="#[bb]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[ba]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ba]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[be]">ocrypto_constant_time_copy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[be]">ocrypto_constant_time_copy</a><BR>
 <LI><a href="#[ae]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[353]">queue_process</a><BR>
 <LI><a href="#[3d0]">pm_handler_flash_clean_on_return</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ca]">pm_handler_flash_clean</a><BR>
 <LI><a href="#[3cd]">rank_highest</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ca]">pm_handler_flash_clean</a><BR>
 <LI><a href="#[205]">buffer_add</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[205]">buffer_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">BusFault_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">CCM_AAR_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">COMP_LPCOMP_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">ECB_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">FPU_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">GPIOTE_IRQHandler</a> from .\_build\nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[6b]">HR_advdata_manuf_data_update</a> from .\_build\main.o(i.HR_advdata_manuf_data_update) referenced from .\_build\main.o(i.timers_init)
 <LI><a href="#[6]">HardFault_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">I2S_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">MWU_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">MemoryManagement_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">NFCT_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PDM_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">POWER_CLOCK_IRQHandler</a> from .\_build\nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM0_IRQHandler</a> from .\_build\nrfx_pwm.o(i.PWM0_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM1_IRQHandler</a> from .\_build\nrfx_pwm.o(i.PWM1_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">PWM2_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">QDEC_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">RADIO_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RNG_IRQHandler</a> from .\_build\nrfx_rng.o(i.RNG_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">RTC0_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">RTC1_IRQHandler</a> from .\_build\drv_rtc.o(i.RTC1_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">RTC2_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">SAADC_IRQHandler</a> from .\_build\nrfx_saadc.o(i.SAADC_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from .\_build\nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from .\_build\nrfx_spim.o(.constdata)
 <LI><a href="#[11]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from .\_build\nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SPIM2_SPIS2_SPI2_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[5b]">SPIVI_zone1_threshold_write_handler</a> from .\_build\main.o(i.SPIVI_zone1_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[5c]">SPIVI_zone2_threshold_write_handler</a> from .\_build\main.o(i.SPIVI_zone2_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[5d]">SPIVI_zone3_threshold_write_handler</a> from .\_build\main.o(i.SPIVI_zone3_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[5e]">SPIVI_zone4_threshold_write_handler</a> from .\_build\main.o(i.SPIVI_zone4_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[5f]">SPIVI_zone5_threshold_write_handler</a> from .\_build\main.o(i.SPIVI_zone5_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[a]">SVC_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI0_EGU0_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI1_EGU1_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI2_EGU2_IRQHandler</a> from .\_build\nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI3_EGU3_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI4_EGU4_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SWI5_EGU5_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from .\_build\system_nrf52.o(i.SystemInit) referenced from .\_build\arm_startup_nrf52.o(.text)
 <LI><a href="#[1a]">TEMP_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">TIMER4_IRQHandler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">UARTE0_UART0_IRQHandler</a> from .\_build\nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from .\_build\arm_startup_nrf52.o(.text) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">WDT_IRQHandler</a> from .\_build\nrfx_wdt.o(i.WDT_IRQHandler) referenced from .\_build\arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">__main</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry.o)(.ARM.Collect$$$$00000000) referenced from .\_build\arm_startup_nrf52.o(.text)
 <LI><a href="#[9c]">ant_evt_handler</a> from .\_build\ant_state_indicator.o(i.ant_evt_handler) referenced from .\_build\ant_state_indicator.o(sdh_ant_observers1)
 <LI><a href="#[70]">ant_hrm_evt_handler</a> from .\_build\main.o(i.ant_hrm_evt_handler) referenced from .\_build\main.o(.constdata)
 <LI><a href="#[9b]">ant_hrm_sens_evt_handler</a> from .\_build\ant_hrm.o(i.ant_hrm_sens_evt_handler) referenced from .\_build\main.o(sdh_ant_observers1)
 <LI><a href="#[6c]">ant_plus_handler</a> from .\_build\main.o(i.ant_plus_handler) referenced from .\_build\main.o(i.timers_init)
 <LI><a href="#[50]">app_error_fault_handler</a> from .\_build\app_error_weak.o(i.app_error_fault_handler) referenced from .\_build\nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[99]">app_shutdown_handler</a> from .\_build\main.o(i.app_shutdown_handler) referenced from .\_build\main.o(pwr_mgmt_data0)
 <LI><a href="#[44]">app_timer_cnt_get</a> from .\_build\app_timer2.o(i.app_timer_cnt_get) referenced from .\_build\main.o(i.main)
 <LI><a href="#[40]">apply_pending_handle</a> from .\_build\gatt_cache_manager.o(i.apply_pending_handle) referenced from .\_build\gatt_cache_manager.o(i.gcm_ble_evt_handler)
 <LI><a href="#[68]">battery_level_meas_timeout_handler</a> from .\_build\main.o(i.battery_level_meas_timeout_handler) referenced from .\_build\main.o(i.timers_init)
 <LI><a href="#[6a]">biblioteca_phillips_handler</a> from .\_build\main.o(i.biblioteca_phillips_handler) referenced from .\_build\main.o(i.timers_init)
 <LI><a href="#[3a]">blacklisted_peers_state_transition_handle</a> from .\_build\auth_status_tracker.o(i.blacklisted_peers_state_transition_handle) referenced from .\_build\auth_status_tracker.o(i.ast_init)
 <LI><a href="#[9f]">ble_advertising_on_ble_evt</a> from .\_build\ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers1)
 <LI><a href="#[a4]">ble_bas_on_ble_evt</a> from .\_build\ble_bas.o(i.ble_bas_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[a9]">ble_cscs_on_ble_evt</a> from .\_build\ble_cscs.o(i.ble_cscs_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[aa]">ble_dfu_buttonless_on_ble_evt</a> from .\_build\ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt) referenced from .\_build\ble_dfu.o(sdh_ble_observers2)
 <LI><a href="#[af]">ble_dfu_buttonless_on_sys_evt</a> from .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt) referenced from .\_build\ble_dfu_unbonded.o(sdh_soc_observers1)
 <LI><a href="#[65]">ble_dfu_evt_handler</a> from .\_build\main.o(i.ble_dfu_evt_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[9d]">ble_evt_handler</a> from .\_build\ble_conn_state.o(i.ble_evt_handler) referenced from .\_build\ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[a0]">ble_evt_handler</a> from .\_build\bsp_btn_ble.o(i.ble_evt_handler) referenced 3 times from .\_build\bsp_btn_ble.o(sdh_ble_observers1)
 <LI><a href="#[ab]">ble_evt_handler</a> from .\_build\main.o(i.ble_evt_handler) referenced from .\_build\main.o(sdh_ble_observers3)
 <LI><a href="#[a3]">ble_hrs_on_ble_evt</a> from .\_build\ble_hrs.o(i.ble_hrs_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[a8]">ble_rtcs_on_ble_evt</a> from .\_build\ble_rtcs.o(i.ble_rtcs_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[a7]">ble_rus_on_ble_evt</a> from .\_build\ble_rus.o(i.ble_rus_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[a6]">ble_uds_on_ble_evt</a> from .\_build\ble_uds.o(i.ble_uds_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[71]">bsp_button_event_handler</a> from .\_build\bsp.o(i.bsp_button_event_handler) referenced from .\_build\bsp.o(.constdata)
 <LI><a href="#[3f]">bsp_event_handler</a> from .\_build\main.o(i.bsp_event_handler) referenced from .\_build\main.o(i.button_and_leds_init)
 <LI><a href="#[3e]">button_timer_handler</a> from .\_build\bsp.o(i.button_timer_handler) referenced from .\_build\bsp.o(i.bsp_init)
 <LI><a href="#[b3]">buttonless_dfu_sdh_state_observer</a> from .\_build\main.o(i.buttonless_dfu_sdh_state_observer) referenced from .\_build\main.o(sdh_state_observers0)
 <LI><a href="#[6f]">car_update_pending_handle</a> from .\_build\gatt_cache_manager.o(i.car_update_pending_handle) referenced from .\_build\gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[4a]">clock_irq_handler</a> from .\_build\nrf_drv_clock.o(i.clock_irq_handler) referenced from .\_build\nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[8b]">compare_func</a> from .\_build\app_timer2.o(i.compare_func) referenced from .\_build\app_timer2.o(.constdata)
 <LI><a href="#[47]">conn_params_error_handler</a> from .\_build\main.o(i.conn_params_error_handler) referenced from .\_build\main.o(i.main)
 <LI><a href="#[69]">csc_meas_timeout_handler</a> from .\_build\main.o(i.csc_meas_timeout_handler) referenced from .\_build\main.o(i.timers_init)
 <LI><a href="#[6e]">db_update_pending_handle</a> from .\_build\gatt_cache_manager.o(i.db_update_pending_handle) referenced from .\_build\gatt_cache_manager.o(i.update_pending_flags_check)
 <LI><a href="#[38]">detection_delay_timeout_handler</a> from .\_build\app_button.o(i.detection_delay_timeout_handler) referenced from .\_build\app_button.o(i.app_button_init)
 <LI><a href="#[3d]">disconnect</a> from .\_build\main.o(i.disconnect) referenced from .\_build\main.o(i.ble_dfu_evt_handler)
 <LI><a href="#[3c]">dummy_evt_handler</a> from .\_build\ble_dfu.o(i.dummy_evt_handler) referenced from .\_build\ble_dfu.o(i.ble_dfu_buttonless_init)
 <LI><a href="#[49]">entropy_callback</a> from .\_build\nrf_hw_backend_rng_mbedtls.o(i.entropy_callback) referenced from .\_build\nrf_hw_backend_rng_mbedtls.o(i.nrf_crypto_rng_backend_init)
 <LI><a href="#[90]">erase</a> from .\_build\nrf_fstorage_sd.o(i.erase) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[51]">fds_evt_handler</a> from .\_build\peer_data_storage.o(i.fds_evt_handler) referenced from .\_build\peer_data_storage.o(i.pds_init)
 <LI><a href="#[3]">fs_event_handler</a> from .\_build\fds.o(i.fs_event_handler) referenced 2 times from .\_build\fds.o(fs_data)
 <LI><a href="#[2]">fstorage_evt_handler</a> from .\_build\buffer_services.o(i.fstorage_evt_handler) referenced 2 times from .\_build\buffer_services.o(fs_data)
 <LI><a href="#[45]">gatt_evt_handler</a> from .\_build\main.o(i.gatt_evt_handler) referenced from .\_build\main.o(i.main)
 <LI><a href="#[73]">gcm_im_evt_handler</a> from .\_build\gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from .\_build\id_manager.o(.constdata)
 <LI><a href="#[78]">gcm_pdb_evt_handler</a> from .\_build\gatt_cache_manager.o(i.gcm_pdb_evt_handler) referenced from .\_build\peer_database.o(.constdata)
 <LI><a href="#[37]">gpiote_event_handler</a> from .\_build\app_button.o(i.gpiote_event_handler) referenced from .\_build\app_button.o(i.app_button_init)
 <LI><a href="#[77]">gscm_pdb_evt_handler</a> from .\_build\gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from .\_build\peer_database.o(.constdata)
 <LI><a href="#[59]">hr_zone_preference_calc_write_handler</a> from .\_build\main.o(i.hr_zone_preference_calc_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[8c]">init</a> from .\_build\nrf_fstorage_sd.o(i.init) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[93]">is_busy</a> from .\_build\nrf_fstorage_sd.o(i.is_busy) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[67]">link_secure_pending_handle</a> from .\_build\security_manager.o(i.link_secure_pending_handle) referenced from .\_build\security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[67]">link_secure_pending_handle</a> from .\_build\security_manager.o(i.link_secure_pending_handle) referenced from .\_build\security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[9a]">m_shutdown_handler</a> from .\_build\ant_state_indicator.o(i.m_shutdown_handler) referenced from .\_build\ant_state_indicator.o(pwr_mgmt_data1)
 <LI><a href="#[33]">main</a> from .\_build\main.o(i.main) referenced from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry9a.o)(.ARM.Collect$$$$0000000B)
 <LI><a href="#[88]">memcpy</a> from C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text) referenced from .\_build\oberon_backend_ecc.o(.constdata)
 <LI><a href="#[9e]">nrf_ble_gatt_on_ble_evt</a> from .\_build\nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers1)
 <LI><a href="#[a5]">nrf_ble_qwr_on_ble_evt</a> from .\_build\nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from .\_build\main.o(sdh_ble_observers2)
 <LI><a href="#[87]">nrf_crypto_backend_curve25519_ecdh_compute</a> from .\_build\oberon_backend_ecdh.o(i.nrf_crypto_backend_curve25519_ecdh_compute) referenced from .\_build\nrf_crypto_ecdh.o(.constdata)
 <LI><a href="#[7c]">nrf_crypto_backend_curve25519_key_pair_generate</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_curve25519_key_pair_generate) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[7f]">nrf_crypto_backend_curve25519_public_key_calculate</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_curve25519_public_key_calculate) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[7d]">nrf_crypto_backend_ed25519_key_pair_generate</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_ed25519_key_pair_generate) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[82]">nrf_crypto_backend_ed25519_private_key_from_raw</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_ed25519_private_key_from_raw) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[80]">nrf_crypto_backend_ed25519_public_key_calculate</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_ed25519_public_key_calculate) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[81]">nrf_crypto_backend_oberon_private_key_from_raw</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_private_key_from_raw) referenced 2 times from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[83]">nrf_crypto_backend_oberon_private_key_to_raw</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_private_key_to_raw) referenced 3 times from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[84]">nrf_crypto_backend_oberon_public_key_from_raw</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_public_key_from_raw) referenced 3 times from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[85]">nrf_crypto_backend_oberon_public_key_to_raw</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_public_key_to_raw) referenced 3 times from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[86]">nrf_crypto_backend_secp256r1_ecdh_compute</a> from .\_build\oberon_backend_ecdh.o(i.nrf_crypto_backend_secp256r1_ecdh_compute) referenced from .\_build\nrf_crypto_ecdh.o(.constdata)
 <LI><a href="#[7b]">nrf_crypto_backend_secp256r1_key_pair_generate</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_secp256r1_key_pair_generate) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[7e]">nrf_crypto_backend_secp256r1_public_key_calculate</a> from .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_secp256r1_public_key_calculate) referenced from .\_build\nrf_crypto_ecc.o(.constdata)
 <LI><a href="#[ac]">nrf_fstorage_sdh_req_handler</a> from .\_build\nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from .\_build\nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[b6]">nrf_fstorage_sdh_state_handler</a> from .\_build\nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from .\_build\nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[ae]">nrf_fstorage_sys_evt_handler</a> from .\_build\nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from .\_build\nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[97]">nrf_hw_backend_init</a> from .\_build\nrf_hw_backend_init.o(i.nrf_hw_backend_init) referenced from .\_build\nrf_hw_backend_init.o(crypto_data)
 <LI><a href="#[98]">nrf_hw_backend_uninit</a> from .\_build\nrf_hw_backend_init.o(i.nrf_hw_backend_uninit) referenced from .\_build\nrf_hw_backend_init.o(crypto_data)
 <LI><a href="#[96]">nrf_log_backend_uart_flush</a> from .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush) referenced from .\_build\nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[95]">nrf_log_backend_uart_panic_set</a> from .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set) referenced from .\_build\nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[94]">nrf_log_backend_uart_put</a> from .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_put) referenced from .\_build\nrf_log_backend_uart.o(.constdata)
 <LI><a href="#[56]">nrf_qwr_error_handler</a> from .\_build\main.o(i.nrf_qwr_error_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[b2]">nrf_sdh_ant_evts_poll</a> from .\_build\nrf_sdh_ant.o(i.nrf_sdh_ant_evts_poll) referenced from .\_build\nrf_sdh_ant.o(sdh_stack_observers0)
 <LI><a href="#[b0]">nrf_sdh_ble_evts_poll</a> from .\_build\nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from .\_build\nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[b1]">nrf_sdh_soc_evts_poll</a> from .\_build\nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from .\_build\nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[4b]">nrfx_rng_handler</a> from .\_build\nrf_drv_rng.o(i.nrfx_rng_handler) referenced from .\_build\nrf_drv_rng.o(i.nrf_drv_rng_init)
 <LI><a href="#[4b]">nrfx_rng_handler</a> from .\_build\nrf_drv_rng.o(i.nrfx_rng_handler) referenced from .\_build\nrf_drv_rng.o(i.sd_state_evt_handler)
 <LI><a href="#[89]">nrfx_uart_0_irq_handler</a> from .\_build\nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from .\_build\nrfx_uart.o(.constdata)
 <LI><a href="#[8a]">nrfx_uarte_0_irq_handler</a> from .\_build\nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from .\_build\nrfx_uarte.o(.constdata)
 <LI><a href="#[36]">on_adv_evt</a> from .\_build\main.o(i.on_adv_evt) referenced from .\_build\main.o(i.advertising_init)
 <LI><a href="#[46]">on_conn_params_evt</a> from .\_build\main.o(i.on_conn_params_evt) referenced from .\_build\main.o(i.main)
 <LI><a href="#[66]">params_reply_pending_handle</a> from .\_build\security_manager.o(i.params_reply_pending_handle) referenced from .\_build\security_manager.o(i.sm_ble_evt_handler)
 <LI><a href="#[66]">params_reply_pending_handle</a> from .\_build\security_manager.o(i.params_reply_pending_handle) referenced from .\_build\security_manager.o(i.sm_pdb_evt_handler)
 <LI><a href="#[74]">pdb_pds_evt_handler</a> from .\_build\peer_database.o(i.pdb_pds_evt_handler) referenced from .\_build\peer_data_storage.o(.constdata)
 <LI><a href="#[42]">platform_read</a> from .\_build\main.o(i.platform_read) referenced from .\_build\main.o(i.lis2dw12_config)
 <LI><a href="#[42]">platform_read</a> from .\_build\main.o(i.platform_read) referenced from .\_build\main.o(i.main)
 <LI><a href="#[41]">platform_write</a> from .\_build\main.o(i.platform_write) referenced from .\_build\main.o(i.lis2dw12_config)
 <LI><a href="#[41]">platform_write</a> from .\_build\main.o(i.platform_write) referenced from .\_build\main.o(i.main)
 <LI><a href="#[52]">pm_evt_handler</a> from .\_build\main.o(i.pm_evt_handler) referenced from .\_build\main.o(i.peer_manager_init)
 <LI><a href="#[0]">pm_gcm_evt_handler</a> from .\_build\peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from .\_build\gatt_cache_manager.o(.data)
 <LI><a href="#[1]">pm_gscm_evt_handler</a> from .\_build\peer_manager.o(i.pm_gscm_evt_handler) referenced 2 times from .\_build\gatts_cache_manager.o(.data)
 <LI><a href="#[72]">pm_im_evt_handler</a> from .\_build\peer_manager.o(i.pm_im_evt_handler) referenced from .\_build\id_manager.o(.constdata)
 <LI><a href="#[75]">pm_pdb_evt_handler</a> from .\_build\peer_manager.o(i.pm_pdb_evt_handler) referenced from .\_build\peer_database.o(.constdata)
 <LI><a href="#[7a]">pm_sm_evt_handler</a> from .\_build\peer_manager.o(i.pm_sm_evt_handler) referenced from .\_build\security_manager.o(.constdata)
 <LI><a href="#[53]">pwm1_handler</a> from .\_build\controle_leds.o(i.pwm1_handler) referenced from .\_build\controle_leds.o(i.pwm_init)
 <LI><a href="#[8e]">read</a> from .\_build\nrf_fstorage_sd.o(i.read) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[60]">rhr_zone1_threshold_write_handler</a> from .\_build\main.o(i.rhr_zone1_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[61]">rhr_zone2_threshold_write_handler</a> from .\_build\main.o(i.rhr_zone2_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[62]">rhr_zone3_threshold_write_handler</a> from .\_build\main.o(i.rhr_zone3_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[63]">rhr_zone4_threshold_write_handler</a> from .\_build\main.o(i.rhr_zone4_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[64]">rhr_zone5_threshold_write_handler</a> from .\_build\main.o(i.rhr_zone5_threshold_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[91]">rmap</a> from .\_build\nrf_fstorage_sd.o(i.rmap) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[39]">rtc_irq</a> from .\_build\app_timer2.o(i.rtc_irq) referenced from .\_build\app_timer2.o(i.app_timer_init)
 <LI><a href="#[54]">saadc_callback</a> from .\_build\main.o(i.saadc_callback) referenced from .\_build\main.o(i.saadc_init)
 <LI><a href="#[57]">sc_ctrlpt_event_handler</a> from .\_build\main.o(i.sc_ctrlpt_event_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[55]">sc_send_pending_handle</a> from .\_build\gatt_cache_manager.o(i.sc_send_pending_handle) referenced from .\_build\gatt_cache_manager.o(i.service_changed_pending_flags_check)
 <LI><a href="#[b4]">sd_state_evt_handler</a> from .\_build\nrf_drv_clock.o(i.sd_state_evt_handler) referenced 2 times from .\_build\nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[5a]">serial_number_write_handler</a> from .\_build\main.o(i.serial_number_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[4f]">serial_tx</a> from .\_build\nrf_log_backend_uart.o(i.serial_tx) referenced from .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
 <LI><a href="#[76]">sm_pdb_evt_handler</a> from .\_build\security_manager.o(i.sm_pdb_evt_handler) referenced from .\_build\peer_database.o(.constdata)
 <LI><a href="#[79]">sm_smd_evt_handler</a> from .\_build\security_manager.o(i.sm_smd_evt_handler) referenced from .\_build\security_dispatcher.o(.constdata)
 <LI><a href="#[ad]">soc_evt_handler</a> from .\_build\nrf_drv_clock.o(i.soc_evt_handler) referenced from .\_build\nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[43]">spi_event_handler</a> from .\_build\main.o(i.spi_event_handler) referenced from .\_build\main.o(i.lis2dw12_config)
 <LI><a href="#[43]">spi_event_handler</a> from .\_build\main.o(i.spi_event_handler) referenced from .\_build\main.o(i.main)
 <LI><a href="#[43]">spi_event_handler</a> from .\_build\main.o(i.spi_event_handler) referenced from .\_build\main.o(i.spi_init)
 <LI><a href="#[4c]">spim_evt_handler</a> from .\_build\nrf_drv_spi.o(i.spim_evt_handler) referenced from .\_build\nrf_drv_spi.o(i.nrf_drv_spi_init)
 <LI><a href="#[4e]">uart_evt_handler</a> from .\_build\nrf_drv_uart.o(i.uart_evt_handler) referenced from .\_build\nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[6d]">uart_evt_handler</a> from .\_build\nrf_log_backend_uart.o(i.uart_evt_handler) referenced from .\_build\nrf_log_backend_uart.o(i.uart_init)
 <LI><a href="#[4d]">uarte_evt_handler</a> from .\_build\nrf_drv_uart.o(i.uarte_evt_handler) referenced from .\_build\nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[8d]">uninit</a> from .\_build\nrf_fstorage_sd.o(i.uninit) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3b]">update_timeout_handler</a> from .\_build\ble_conn_params.o(i.update_timeout_handler) referenced from .\_build\ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[58]">user_id_write_handler</a> from .\_build\main.o(i.user_id_write_handler) referenced from .\_build\main.o(i.services_init)
 <LI><a href="#[48]">wdt_event_handler</a> from .\_build\main.o(i.wdt_event_handler) referenced from .\_build\main.o(i.main)
 <LI><a href="#[92]">wmap</a> from .\_build\nrf_fstorage_sd.o(i.wmap) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[8f]">write</a> from .\_build\nrf_fstorage_sd.o(i.write) referenced from .\_build\nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry.o)(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[428]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry2.o)(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b7]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry5.o)(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry5.o)(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[429]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry7b.o)(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[42a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry8b.o)(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[42b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry9a.o)(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[42c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry10a.o)(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[42d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(entry11a.o)(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b9]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\app_error_handler_keil.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_setup
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_meas_timeout_handler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_save
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_advdata_manuf_data_update
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_message_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_shutdown_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[308]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, .\_build\nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[ba]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>

<P><STRONG><a name="[30b]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, .\_build\nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[bb]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>

<P><STRONG><a name="[307]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\_build\nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[313]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[312]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[310]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[42e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[30f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[315]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[42f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[430]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\_build\arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[431]"></a>ocrypto_bigint_add128</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text), UNUSED)

<P><STRONG><a name="[432]"></a>ocrypto_bigint_sub128</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text), UNUSED)

<P><STRONG><a name="[433]"></a>ocrypto_bigint_add256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>ocrypto_bigint_sub256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc25519_from32bytes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc_p256_from32bytes
</UL>

<P><STRONG><a name="[dd]"></a>ocrypto_bigint_cadd256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry.constprop.3
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc25519_from32bytes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc_p256_from32bytes
</UL>

<P><STRONG><a name="[434]"></a>ocrypto_bigint_csub256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>ocrypto_bigint_cswap256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cswap64
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_cneg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[103]"></a>ocrypto_bigint_mul128</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc25519_from32bytes
</UL>

<P><STRONG><a name="[435]"></a>ocrypto_bigint_sqr256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text), UNUSED)

<P><STRONG><a name="[436]"></a>ocrypto_bigint_mul256</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>ocrypto_constant_time_equal</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_constant_time.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_from64bytes
</UL>

<P><STRONG><a name="[f2]"></a>ocrypto_constant_time_is_zero</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_constant_time.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[be]"></a>ocrypto_constant_time_copy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_constant_time.s.obj)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_cneg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_copy
</UL>

<P><STRONG><a name="[102]"></a>ocrypto_constant_time_fill_zero</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_constant_time.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_cneg
</UL>

<P><STRONG><a name="[e7]"></a>ocrypto_mod_p256_add</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zdblu
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_from64bytes
</UL>

<P><STRONG><a name="[f1]"></a>ocrypto_mod_p256_sub</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_cneg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zdblu
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[e6]"></a>ocrypto_mod_p256_square</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zdblu
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_invert
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_from64bytes
</UL>

<P><STRONG><a name="[e8]"></a>ocrypto_mod_p256_mul</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zdblu
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_invert
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_from64bytes
</UL>

<P><STRONG><a name="[d9]"></a>ocrypto_mod25519_add</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbl_p1p1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
</UL>

<P><STRONG><a name="[db]"></a>ocrypto_mod25519_sub</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_neg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbl_p1p1
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
</UL>

<P><STRONG><a name="[d8]"></a>ocrypto_mod25519_square</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbl_p1p1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_power
</UL>

<P><STRONG><a name="[d2]"></a>ocrypto_mod25519_mul</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.0
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_pack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_power
</UL>

<P><STRONG><a name="[e0]"></a>ocrypto_mod25519_mul121666</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
</UL>

<P><STRONG><a name="[101]"></a>ocrypto_mod25519_freeze</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519_base.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_getsign
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_toBytes
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(uldiv.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_init
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(llshl.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[437]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(ctype_o.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[438]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text), UNUSED)

<P><STRONG><a name="[439]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_ed25519_private_key_from_raw
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_modes_config_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_evt
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean_on_return
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_ed25519_public_key_calculate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_ed25519_key_pair_generate
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[43b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text), UNUSED)

<P><STRONG><a name="[88]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oberon_backend_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[43c]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memmove.o)(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[43d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_stat
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_in_range
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_char_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_char_add
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_zone_preference_calc_char_add
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone5_threshold_char_add
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone4_threshold_char_add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone3_threshold_char_add
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone2_threshold_char_add
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone1_threshold_char_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone5_threshold_char_add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone4_threshold_char_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone3_threshold_char_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone2_threshold_char_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone1_threshold_char_add
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_advdata_manuf_data_update
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_evt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_highest
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
</UL>

<P><STRONG><a name="[43f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memseta.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1db]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(strlen.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[131]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_peer_blacklisted
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[201]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(strcpy.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_write_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_serial_number_metric
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_number_metric
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_load
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(dadd.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(dadd.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(dadd.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_mb2
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(dmul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_mb2
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(dfltui.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_mb2
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(d2f.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_mb2
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(llushr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[440]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(llsshr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[441]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(llsshr.o)(.text), UNUSED)

<P><STRONG><a name="[442]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(iusefp.o)(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(fepilogue.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[443]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(fepilogue.o)(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(depilogue.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c7]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mf_w.l(depilogue.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(init.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[444]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(init.o)(.text), UNUSED)

<P><STRONG><a name="[445]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(__dczerorl2.o)(.text), UNUSED)

<P><STRONG><a name="[446]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(__dczerorl2.o)(.text), UNUSED)

<P><STRONG><a name="[de]"></a>ocrypto_curve25519_scalarmult</STRONG> (Thumb, 426 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve25519.c.obj)(.text.ocrypto_curve25519_scalarmult))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_toBytes
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_power
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul121666
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_square
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_sub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_add
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_copy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_fromBytes
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cswap256
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult_base
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_curve25519_ecdh_compute
</UL>

<P><STRONG><a name="[e3]"></a>ocrypto_curve25519_scalarmult_base</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve25519.c.obj)(.text.ocrypto_curve25519_scalarmult_base))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_curve25519_public_key_calculate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_curve25519_key_pair_generate
</UL>

<P><STRONG><a name="[e4]"></a>ocrypto_curve_p256_from64bytes</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.ocrypto_curve_p256_from64bytes))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_fromBytes
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_equal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_mul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_square
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_common_secret
</UL>

<P><STRONG><a name="[ea]"></a>ocrypto_curve_p256_scalarmult</STRONG> (Thumb, 356 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.ocrypto_curve_p256_scalarmult))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_cneg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cadd256
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_sub256
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddu
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zaddc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p256_zdblu
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cswap256
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_invert
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_sub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_mul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_square
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_is_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_common_secret
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult_base
</UL>

<P><STRONG><a name="[f3]"></a>ocrypto_curve_p256_scalarmult_base</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.ocrypto_curve_p256_scalarmult_base))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_public_key
</UL>

<P><STRONG><a name="[f4]"></a>ocrypto_curve_p256_to32bytes</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.ocrypto_curve_p256_to32bytes))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_toBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_common_secret
</UL>

<P><STRONG><a name="[f6]"></a>ocrypto_curve_p256_to64bytes</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.ocrypto_curve_p256_to64bytes))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_toBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_public_key
</UL>

<P><STRONG><a name="[f7]"></a>ocrypto_ecdh_p256_common_secret</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ecdh_p256.c.obj)(.text.ocrypto_ecdh_p256_common_secret))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_to32bytes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_from64bytes
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc_p256_from32bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_secp256r1_ecdh_compute
</UL>

<P><STRONG><a name="[f9]"></a>ocrypto_ecdh_p256_public_key</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ecdh_p256.c.obj)(.text.ocrypto_ecdh_p256_public_key))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_to64bytes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult_base
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc_p256_from32bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_secp256r1_public_key_calculate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_secp256r1_key_pair_generate
</UL>

<P><STRONG><a name="[fa]"></a>ocrypto_ed25519_public_key</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ed25519.c.obj)(.text.ocrypto_ed25519_public_key))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_pack
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc25519_from32bytes
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_ed25519_private_key_from_raw
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_ed25519_key_pair_generate
</UL>

<P><STRONG><a name="[fe]"></a>ocrypto_ge25519_pack</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.ocrypto_ge25519_pack))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_getsign
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_toBytes
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_power
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ed25519_public_key
</UL>

<P><STRONG><a name="[fd]"></a>ocrypto_ge25519_scalarmult_base</STRONG> (Thumb, 238 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.ocrypto_ge25519_scalarmult_base))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sc25519_window4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.0
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry.constprop.3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbl_p1p1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ed25519_public_key
</UL>

<P><STRONG><a name="[df]"></a>ocrypto_mod25519_fromBytes</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519.c.obj)(.text.ocrypto_mod25519_fromBytes))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
</UL>

<P><STRONG><a name="[ff]"></a>ocrypto_mod25519_getsign</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519.c.obj)(.text.ocrypto_mod25519_getsign))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_freeze
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_pack
</UL>

<P><STRONG><a name="[dc]"></a>ocrypto_mod25519_init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519.c.obj)(.text.ocrypto_mod25519_init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry.constprop.3
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[da]"></a>ocrypto_mod25519_neg</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519.c.obj)(.text.ocrypto_mod25519_neg))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbl_p1p1
</UL>

<P><STRONG><a name="[e1]"></a>ocrypto_mod25519_power</STRONG> (Thumb, 546 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519.c.obj)(.text.ocrypto_mod25519_power))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_square
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_pack
</UL>

<P><STRONG><a name="[e2]"></a>ocrypto_mod25519_toBytes</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod25519.c.obj)(.text.ocrypto_mod25519_toBytes))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_freeze
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_pack
</UL>

<P><STRONG><a name="[ed]"></a>ocrypto_mod_p256_cneg</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256.c.obj)(.text.ocrypto_mod_p256_cneg))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_fill_zero
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_constant_time_copy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cswap256
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[e5]"></a>ocrypto_mod_p256_fromBytes</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256.c.obj)(.text.ocrypto_mod_p256_fromBytes))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_from64bytes
</UL>

<P><STRONG><a name="[f0]"></a>ocrypto_mod_p256_invert</STRONG> (Thumb, 350 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256.c.obj)(.text.ocrypto_mod_p256_invert))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_mul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_square
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[f5]"></a>ocrypto_mod_p256_toBytes</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_mod_p256.c.obj)(.text.ocrypto_mod_p256_toBytes))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_to32bytes
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_to64bytes
</UL>

<P><STRONG><a name="[fc]"></a>ocrypto_sc25519_from32bytes</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sc25519.c.obj)(.text.ocrypto_sc25519_from32bytes))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_mul128
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cadd256
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_sub256
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ed25519_public_key
</UL>

<P><STRONG><a name="[100]"></a>ocrypto_sc25519_window4</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sc25519.c.obj)(.text.ocrypto_sc25519_window4))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[f8]"></a>ocrypto_sc_p256_from32bytes</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sc_p256.c.obj)(.text.ocrypto_sc_p256_from32bytes))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cadd256
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_sub256
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_common_secret
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_public_key
</UL>

<P><STRONG><a name="[fb]"></a>ocrypto_sha512</STRONG> (Thumb, 976 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sha512.c.obj)(.text.ocrypto_sha512))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_blocks.constprop.1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ed25519_public_key
</UL>

<P><STRONG><a name="[106]"></a>ocrypto_sha512_loop1</STRONG> (Thumb, 516 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sha512_loop.c.obj)(.text.ocrypto_sha512_loop1))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_blocks.constprop.1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_blocks
</UL>

<P><STRONG><a name="[107]"></a>ocrypto_sha512_loop2</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sha512_loop.c.obj)(.text.ocrypto_sha512_loop2))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_blocks.constprop.1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512_blocks
</UL>

<P><STRONG><a name="[23d]"></a>ADS018_Cycle</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, .\_build\main.o(i.ADS018_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS018_Cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
</UL>

<P><STRONG><a name="[278]"></a>ADS018_IIR_Update</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, .\_build\main.o(i.ADS018_IIR_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADS018_IIR_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>

<P><STRONG><a name="[108]"></a>ADS018_Set_Mean_Data</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\main.o(i.ADS018_Set_Mean_Data))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Set_Result
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
</UL>

<P><STRONG><a name="[109]"></a>ADS018_Set_Result</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\_build\main.o(i.ADS018_Set_Result))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Set_Mean_Data
</UL>

<P><STRONG><a name="[421]"></a>ADS018_Set_Result_C</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, .\_build\main.o(i.ADS018_Set_Result_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADS018_Set_Result_C
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_c
</UL>

<P><STRONG><a name="[10a]"></a>ADS018_Update_SCycle</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, .\_build\main.o(i.ADS018_Update_SCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADS018_Update_SCycle &rArr; update_c &rArr; ADS018_Set_Result_C
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_s
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_c
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_var
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_f
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_res_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
</UL>

<P><STRONG><a name="[10c]"></a>ADS018_res_data_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\main.o(i.ADS018_res_data_clear))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Update_SCycle
</UL>

<P><STRONG><a name="[14]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, .\_build\nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HR_advdata_manuf_data_update</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, .\_build\main.o(i.HR_advdata_manuf_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = HR_advdata_manuf_data_update &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_feed
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_advdata_update
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_measurement_update
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[3df]"></a>Int_to_Hex</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, .\_build\main.o(i.Int_to_Hex))
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply
</UL>

<P><STRONG><a name="[e]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\_build\nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrfx_pwm.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM0_IRQHandler &rArr; irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrfx_pwm.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM1_IRQHandler &rArr; irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RNG_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\nrfx_rng.o(i.RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.RTC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SAADC_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, .\_build\nrfx_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\_build\nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spim.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 740 bytes, Stack size 20 bytes, .\_build\system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WDT_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\_build\nrfx_wdt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[447]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(handlers.o)(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[448]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(handlers.o)(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[449]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(handlers.o)(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2ba]"></a>acc_f</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, .\_build\main.o(i.acc_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = acc_f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_c
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_f
</UL>

<P><STRONG><a name="[130]"></a>addr_compare</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\_build\id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[137]"></a>advertising_start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\_build\main.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = advertising_start &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>ah</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, .\_build\id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[143]"></a>ant_channel_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\_build\ant_channel_config.o(i.ant_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ant_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_init
</UL>

<P><STRONG><a name="[70]"></a>ant_hrm_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\main.o(i.ant_hrm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ant_hrm_evt_handler &rArr; ant_hrm_measurement_one_iteration
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_feed
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_measurement_one_iteration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>ant_hrm_measurement_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\_build\ant_hrm_measurement.o(i.ant_hrm_measurement_init))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_measurement_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>ant_hrm_measurement_one_iteration</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\_build\ant_hrm_measurement.o(i.ant_hrm_measurement_one_iteration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ant_hrm_measurement_one_iteration
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_evt_handler
</UL>

<P><STRONG><a name="[11a]"></a>ant_hrm_measurement_update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\ant_hrm_measurement.o(i.ant_hrm_measurement_update))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_advdata_manuf_data_update
</UL>

<P><STRONG><a name="[40f]"></a>ant_hrm_page_0_encode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\ant_hrm_page_0.o(i.ant_hrm_page_0_encode))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_message_encode
</UL>

<P><STRONG><a name="[146]"></a>ant_hrm_page_1_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\ant_hrm_page_1.o(i.ant_hrm_page_1_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ant_hrm_page_1_encode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_message_encode
</UL>

<P><STRONG><a name="[148]"></a>ant_hrm_page_2_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\ant_hrm_page_2.o(i.ant_hrm_page_2_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ant_hrm_page_2_encode &rArr; page2_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page2_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_message_encode
</UL>

<P><STRONG><a name="[14a]"></a>ant_hrm_page_3_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\ant_hrm_page_3.o(i.ant_hrm_page_3_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ant_hrm_page_3_encode &rArr; page3_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page3_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_message_encode
</UL>

<P><STRONG><a name="[14c]"></a>ant_hrm_page_4_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\ant_hrm_page_4.o(i.ant_hrm_page_4_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ant_hrm_page_4_encode &rArr; page4_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_message_encode
</UL>

<P><STRONG><a name="[9b]"></a>ant_hrm_sens_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\ant_hrm.o(i.ant_hrm_sens_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ant_hrm_sens_evt_handler &rArr; ant_message_send &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_message_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ant_observers1)
</UL>
<P><STRONG><a name="[14f]"></a>ant_hrm_sens_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\_build\ant_hrm.o(i.ant_hrm_sens_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ant_hrm_sens_init &rArr; ant_hrm_init &rArr; ant_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_setup
</UL>

<P><STRONG><a name="[150]"></a>ant_hrm_sens_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\ant_hrm.o(i.ant_hrm_sens_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ant_hrm_sens_open &rArr; ant_message_send &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_message_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_setup
</UL>

<P><STRONG><a name="[1e1]"></a>ant_plus_key_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\ant_key_manager.o(i.ant_plus_key_set))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[152]"></a>ant_state_indicator_channel_opened</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\ant_state_indicator.o(i.ant_state_indicator_channel_opened))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ant_state_indicator_channel_opened &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_setup
</UL>

<P><STRONG><a name="[153]"></a>ant_state_indicator_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\ant_state_indicator.o(i.ant_state_indicator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ant_state_indicator_init &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[156]"></a>app_button_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\_build\app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[50]"></a>app_error_fault_handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, .\_build\app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[15d]"></a>app_error_save_and_stop</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, .\_build\app_error.o(i.app_error_save_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_error_save_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[173]"></a>app_timer_cnt_diff_compute</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\app_timer2.o(i.app_timer_cnt_diff_compute))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
</UL>

<P><STRONG><a name="[44]"></a>app_timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\app_timer2.o(i.app_timer_cnt_get))
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_transition_handle
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[15a]"></a>app_timer_create</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\app_timer2.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[160]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\_build\app_timer2.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_init &rArr; drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[165]"></a>app_timer_start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\_build\app_timer2.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_transition_handle
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>

<P><STRONG><a name="[168]"></a>app_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\app_timer2.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_stop &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[1f7]"></a>app_util_critical_region_enter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, .\_build\app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_alloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[1fa]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\_build\app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_alloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[171]"></a>ast_auth_error_notify</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, .\_build\auth_status_tracker.o(i.ast_auth_error_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ast_auth_error_notify &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_diff_compute
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_update
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[175]"></a>ast_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\auth_status_tracker.o(i.ast_init))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[176]"></a>ast_peer_blacklisted</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, .\_build\auth_status_tracker.o(i.ast_peer_blacklisted))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ast_peer_blacklisted &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[187]"></a>ble_advdata_encode</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, .\_build\ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_advdata_update
</UL>

<P><STRONG><a name="[18f]"></a>ble_advdata_parse</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, .\_build\ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[190]"></a>ble_advdata_search</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\_build\ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[118]"></a>ble_advertising_advdata_update</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, .\_build\ble_advertising.o(i.ble_advertising_advdata_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_advertising_advdata_update &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_data_size_max_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_advdata_manuf_data_update
</UL>

<P><STRONG><a name="[136]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[135]"></a>ble_advertising_init</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, .\_build\ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_set_data_size_max_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[192]"></a>ble_advertising_modes_config_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\ble_advertising.o(i.ble_advertising_modes_config_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_modes_config_set &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
</UL>

<P><STRONG><a name="[9f]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, .\_build\ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[193]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, .\_build\ble_advertising.o(i.ble_advertising_restart_without_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[13a]"></a>ble_advertising_start</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, .\_build\ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[a4]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, .\_build\ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_bas_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[198]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\_build\ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_encrypted
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>

<P><STRONG><a name="[19c]"></a>ble_conn_state_for_each_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_for_each_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_for_each_connected &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
</UL>

<P><STRONG><a name="[19e]"></a>ble_conn_state_for_each_set_user_flag</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_for_each_set_user_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[1a0]"></a>ble_conn_state_lesc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_lesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_lesc
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>

<P><STRONG><a name="[1a1]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_mitm_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_mitm_protected
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>

<P><STRONG><a name="[1a2]"></a>ble_conn_state_role</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_role
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
</UL>

<P><STRONG><a name="[1a3]"></a>ble_conn_state_status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_status
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>

<P><STRONG><a name="[1a4]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>

<P><STRONG><a name="[13d]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_user_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
</UL>

<P><STRONG><a name="[178]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_pending_handle
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[19a]"></a>ble_conn_state_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_lesc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[1a7]"></a>ble_cscs_init</STRONG> (Thumb, 350 bytes, Stack size 120 bytes, .\_build\ble_cscs.o(i.ble_cscs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_cscs_init &rArr; ble_sc_ctrlpt_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_measurement_encode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[1ac]"></a>ble_cscs_measurement_send</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, .\_build\ble_cscs.o(i.ble_cscs_measurement_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_cscs_measurement_send &rArr; csc_measurement_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_measurement_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_meas_timeout_handler
</UL>

<P><STRONG><a name="[a9]"></a>ble_cscs_on_ble_evt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, .\_build\ble_cscs.o(i.ble_cscs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_cscs_on_ble_evt &rArr; ble_sc_ctrlpt_on_ble_evt &rArr; on_ctrlpt_write &rArr; sc_ctrlpt_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_on_ble_evt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1ae]"></a>ble_dfu_buttonless_async_svci_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_async_svci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ble_dfu_buttonless_async_svci_init &rArr; nrf_dfu_svci_vector_table_unset &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>ble_dfu_buttonless_backend_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_backend_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[1b1]"></a>ble_dfu_buttonless_bootloader_start_finalize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\_build\ble_dfu.o(i.ble_dfu_buttonless_bootloader_start_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
</UL>

<P><STRONG><a name="[1b2]"></a>ble_dfu_buttonless_bootloader_start_prepare</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_bootloader_start_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[1b3]"></a>ble_dfu_buttonless_char_add</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ble_dfu_buttonless_char_add &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
</UL>

<P><STRONG><a name="[1b4]"></a>ble_dfu_buttonless_init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, .\_build\ble_dfu.o(i.ble_dfu_buttonless_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ble_dfu_buttonless_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_backend_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[aa]"></a>ble_dfu_buttonless_on_ble_evt</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, .\_build\ble_dfu.o(i.ble_dfu_buttonless_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ble_dfu_buttonless_on_ble_evt &rArr; ble_dfu_buttonless_bootloader_start_prepare &rArr; ble_dfu_buttonless_bootloader_start_finalize &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_prepare
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1b7]"></a>ble_dfu_buttonless_on_ctrl_pt_write</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_ctrl_pt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>

<P><STRONG><a name="[af]"></a>ble_dfu_buttonless_on_sys_evt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\_build\ble_dfu_unbonded.o(i.ble_dfu_buttonless_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_dfu_buttonless_on_sys_evt &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_resp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu_unbonded.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[1b8]"></a>ble_dfu_buttonless_resp_send</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\_build\ble_dfu.o(i.ble_dfu_buttonless_resp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dfu_buttonless_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_sys_evt
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>

<P><STRONG><a name="[1ba]"></a>ble_dis_init</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, .\_build\ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[a3]"></a>ble_hrs_on_ble_evt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\_build\ble_hrs.o(i.ble_hrs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_hrs_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[27f]"></a>ble_hrs_on_gatt_evt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\ble_hrs.o(i.ble_hrs_on_gatt_evt))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
</UL>

<P><STRONG><a name="[1cb]"></a>ble_rtcs_init</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, .\_build\ble_rtcs.o(i.ble_rtcs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_rtcs_init &rArr; rhr_zone5_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone5_threshold_char_add
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone4_threshold_char_add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone3_threshold_char_add
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone2_threshold_char_add
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhr_zone1_threshold_char_add
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone5_threshold_char_add
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone4_threshold_char_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone3_threshold_char_add
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone2_threshold_char_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIVI_zone1_threshold_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[a8]"></a>ble_rtcs_on_ble_evt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\_build\ble_rtcs.o(i.ble_rtcs_on_ble_evt))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1d2]"></a>ble_rus_init</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, .\_build\ble_rus.o(i.ble_rus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_rus_init &rArr; user_id_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_char_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_number_char_add
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hr_zone_preference_calc_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[a7]"></a>ble_rus_on_ble_evt</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, .\_build\ble_rus.o(i.ble_rus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_rus_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1ab]"></a>ble_sc_ctrlpt_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, .\_build\ble_sc_ctrlpt.o(i.ble_sc_ctrlpt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_sc_ctrlpt_init &rArr; characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_init
</UL>

<P><STRONG><a name="[1ad]"></a>ble_sc_ctrlpt_on_ble_evt</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, .\_build\ble_sc_ctrlpt.o(i.ble_sc_ctrlpt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_sc_ctrlpt_on_ble_evt &rArr; on_ctrlpt_write &rArr; sc_ctrlpt_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_ctrlpt_resp_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_on_ble_evt
</UL>

<P><STRONG><a name="[1d8]"></a>ble_sc_ctrlpt_rsp_send</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, .\_build\ble_sc_ctrlpt.o(i.ble_sc_ctrlpt_rsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_sc_ctrlpt_rsp_send &rArr; ctrlpt_rsp_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlpt_rsp_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_meas_timeout_handler
</UL>

<P><STRONG><a name="[1da]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\_build\ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[3a0]"></a>ble_srv_is_indication_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\ble_srv_common.o(i.ble_srv_is_indication_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>

<P><STRONG><a name="[197]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_on_ble_evt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[a6]"></a>ble_uds_on_ble_evt</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\_build\ble_uds.o(i.ble_uds_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_uds_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[1f0]"></a>bsp_board_button_state_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\boards.o(i.bsp_board_button_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>

<P><STRONG><a name="[1f5]"></a>bsp_board_led_invert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\_build\boards.o(i.bsp_board_led_invert))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[1e8]"></a>bsp_board_led_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\boards.o(i.bsp_board_led_off))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[1ea]"></a>bsp_board_led_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\boards.o(i.bsp_board_led_on))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[1f4]"></a>bsp_board_led_state_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\boards.o(i.bsp_board_led_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[1eb]"></a>bsp_board_leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_event_handler
</UL>

<P><STRONG><a name="[1ec]"></a>bsp_board_leds_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_leds_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[1ef]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[1ed]"></a>bsp_btn_ble_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\_build\bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_btn_ble_init &rArr; advertising_buttons_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
</UL>

<P><STRONG><a name="[1ee]"></a>bsp_button_is_pressed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[3f]"></a>bsp_event_handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\_build\main.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = bsp_event_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.button_and_leds_init)
</UL>
<P><STRONG><a name="[133]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\_build\bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[13f]"></a>bsp_indication_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_state_indicator_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_state_indicator_channel_opened
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_shutdown_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[1f2]"></a>bsp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, .\_build\bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
</UL>

<P><STRONG><a name="[1fb]"></a>buff_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\_build\buffer_services.o(i.buff_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = buff_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flash_info
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>buff_load</STRONG> (Thumb, 648 bytes, Stack size 16 bytes, .\_build\buffer_services.o(i.buff_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = buff_load &rArr; nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[202]"></a>buff_save</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\_build\buffer_services.o(i.buff_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = buff_save &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[366]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[1a9]"></a>characteristic_add</STRONG> (Thumb, 400 bytes, Stack size 96 bytes, .\_build\ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = characteristic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_char_add
</UL>

<P><STRONG><a name="[20e]"></a>check_nv_update_request</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, .\_build\main.o(i.check_nv_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = check_nv_update_request &rArr; buff_save &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_weight_metric
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_waist_circumference_metric
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_user_id
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_two_zone_heart_rate_limit_metric
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_three_zone_heart_rate_limits_metric
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sport_type_for_aerobic_and_anaerobic_thresholds_metric
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_serial_number_metric
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_resting_heart_rate_value_threshold
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_resting_heart_rate_metric
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maximum_recommended_heart_rate_metric
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_last_name_metric
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_language_metric
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hr_zone_preference_calc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_height_metric
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_heart_rate_max_metric
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gender_metric
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_five_zone_heart_rate_limits_metric
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fitnes_index_metric
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_first_name_metric
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fat_burn_heart_rate_upper_limit_metric
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fat_burn_heart_rate_lower_limit_metric
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_email_address_metric
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_of_threshold_assessment_metric
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date_of_birth_metric
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_anaerobic_threshold_metric
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_anaerobic_heart_rate_lower_limit_metric
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_age_metric
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aerobic_threshold_metric
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aerobic_heart_rate_upper_limit_metric
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aerobic_heart_rate_lower_limit_metric
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_VO2_max_metric
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_save
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_load
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>conn_handle_list_get</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, .\_build\ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conn_handle_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[23c]"></a>cycle_treat</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, .\_build\main.o(i.cycle_treat))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = cycle_treat &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Update_SCycle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Set_Mean_Data
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e7]"></a>drv_rtc_compare_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_compare_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[249]"></a>drv_rtc_compare_pending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_compare_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_compare_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[164]"></a>drv_rtc_compare_set</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\_build\drv_rtc.o(i.drv_rtc_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_rtc_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[15f]"></a>drv_rtc_counter_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>

<P><STRONG><a name="[162]"></a>drv_rtc_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, .\_build\drv_rtc.o(i.drv_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[41b]"></a>drv_rtc_irq_trigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_irq_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
</UL>

<P><STRONG><a name="[163]"></a>drv_rtc_overflow_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_overflow_enable))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[24d]"></a>drv_rtc_overflow_pending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_overflow_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_rtc_overflow_pending &rArr; evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3ec]"></a>drv_rtc_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_start))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3eb]"></a>drv_rtc_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.drv_rtc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[24e]"></a>drv_rtc_windowed_compare_set</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, .\_build\drv_rtc.o(i.drv_rtc_windowed_compare_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>

<P><STRONG><a name="[246]"></a>evt_handle</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, .\_build\app_button.o(i.evt_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = evt_handle &rArr; usr_event &rArr; button_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_event
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[262]"></a>fds_file_delete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\_build\fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[266]"></a>fds_gc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\_build\fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[267]"></a>fds_init</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, .\_build\fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[26b]"></a>fds_record_close</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\_build\fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[26c]"></a>fds_record_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, .\_build\fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[26d]"></a>fds_record_find_by_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\_build\fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[26e]"></a>fds_record_find_in_file</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\_build\fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[3bc]"></a>fds_record_id_from_desc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[26f]"></a>fds_record_open</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\_build\fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[270]"></a>fds_record_update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[272]"></a>fds_record_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[273]"></a>fds_register</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\_build\fds.o(i.fds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fds_register &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[274]"></a>fds_stat</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, .\_build\fds.o(i.fds_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_stat &rArr; records_stat
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;records_stat
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[277]"></a>filter</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, .\_build\main.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = filter &rArr; ADS018_IIR_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_IIR_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel
</UL>

<P><STRONG><a name="[279]"></a>filter_init</STRONG> (Thumb, 156 bytes, Stack size 36 bytes, .\_build\main.o(i.filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = filter_init &rArr; ADS018_IIR_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_IIR_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(malloc.o)(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_name
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_8bits
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_16bits
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply
</UL>

<P><STRONG><a name="[1ca]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, .\_build\gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = gcm_ble_evt_handler &rArr; store_car_value &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[73]"></a>gcm_im_evt_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\_build\gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>gcm_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\_build\gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gcm_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[78]"></a>gcm_pdb_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, .\_build\gatt_cache_manager.o(i.gcm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gcm_pdb_evt_handler &rArr; car_update_needed &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[29a]"></a>get_CIA_ATHLETICA_percentage_threshold</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.get_CIA_ATHLETICA_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_CIA_ATHLETICA_info
</UL>

<P><STRONG><a name="[29c]"></a>get_MYBEAT_V2_percentage_threshold</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.get_MYBEAT_V2_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_MYBEAT_V2_info
</UL>

<P><STRONG><a name="[29e]"></a>get_SPIVI_percentage_threshold</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.get_SPIVI_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_SPIVI_info
</UL>

<P><STRONG><a name="[2d9]"></a>get_SPIVI_zone1_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_SPIVI_zone1_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2da]"></a>get_SPIVI_zone2_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_SPIVI_zone2_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2db]"></a>get_SPIVI_zone3_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_SPIVI_zone3_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2dc]"></a>get_SPIVI_zone4_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_SPIVI_zone4_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2dd]"></a>get_SPIVI_zone5_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_SPIVI_zone5_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[3f6]"></a>get_VO2_max_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_VO2_max_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[296]"></a>get_accel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\main.o(i.get_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = get_accel &rArr; filter &rArr; ADS018_IIR_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retira_valor
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[400]"></a>get_aerobic_heart_rate_lower_limit_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_aerobic_heart_rate_lower_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[401]"></a>get_aerobic_heart_rate_upper_limit_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_aerobic_heart_rate_upper_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f9]"></a>get_aerobic_threshold_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_aerobic_threshold_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[2d7]"></a>get_age_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_age_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[402]"></a>get_anaerobic_heart_rate_lower_limit_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_anaerobic_heart_rate_lower_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3fa]"></a>get_anaerobic_threshold_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_anaerobic_threshold_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f2]"></a>get_date_of_birth_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_date_of_birth_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3fc]"></a>get_date_of_threshold_assessment_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_date_of_threshold_assessment_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f1]"></a>get_email_address_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_email_address_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3fe]"></a>get_fat_burn_heart_rate_lower_limit_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_fat_burn_heart_rate_lower_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3ff]"></a>get_fat_burn_heart_rate_upper_limit_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_fat_burn_heart_rate_upper_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3ef]"></a>get_first_name_metric</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_first_name_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[407]"></a>get_fitnes_index_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_fitnes_index_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[403]"></a>get_five_zone_heart_rate_limits_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_five_zone_heart_rate_limits_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f3]"></a>get_gender_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_gender_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f7]"></a>get_heart_rate_max_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_heart_rate_max_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f5]"></a>get_height_metric</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_height_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[298]"></a>get_hr_CIA_ATHLETICA_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\_build\zonas_cardiacas.o(i.get_hr_CIA_ATHLETICA_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_hr_CIA_ATHLETICA_info &rArr; max_hr_get_mb2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_mb2
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CIA_ATHLETICA_percentage_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zones_info_init
</UL>

<P><STRONG><a name="[29b]"></a>get_hr_MYBEAT_V2_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\_build\zonas_cardiacas.o(i.get_hr_MYBEAT_V2_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_hr_MYBEAT_V2_info &rArr; max_hr_get_mb2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_mb2
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MYBEAT_V2_percentage_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zones_info_init
</UL>

<P><STRONG><a name="[29d]"></a>get_hr_SPIVI_info</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, .\_build\zonas_cardiacas.o(i.get_hr_SPIVI_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_hr_SPIVI_info
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_percentage_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zones_info_init
</UL>

<P><STRONG><a name="[29f]"></a>get_hr_rhr_info</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, .\_build\zonas_cardiacas.o(i.get_hr_rhr_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_hr_rhr_info
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_hr_get_rhr
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_percentage_threshold
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resting_heart_rate_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zones_info_init
</UL>

<P><STRONG><a name="[2d8]"></a>get_hr_zone_preference_calc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_hr_zone_preference_calc))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[427]"></a>get_hr_zone_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.get_hr_zone_select))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zones_info_init
</UL>

<P><STRONG><a name="[406]"></a>get_language_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_language_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f0]"></a>get_last_name_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_last_name_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f8]"></a>get_maximum_recommended_heart_rate_metric</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_maximum_recommended_heart_rate_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3ed]"></a>get_metrics</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_metrics))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3d9]"></a>get_pulso</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\controle_leds.o(i.get_pulso))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm1_handler
</UL>

<P><STRONG><a name="[2e3]"></a>get_resting_heart_rate_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_resting_heart_rate_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2a1]"></a>get_resting_heart_rate_value</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.get_resting_heart_rate_value))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_rhr_info
</UL>

<P><STRONG><a name="[2a2]"></a>get_rhr_percentage_threshold</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.get_rhr_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_rhr_info
</UL>

<P><STRONG><a name="[2de]"></a>get_rhr_zone1_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_rhr_zone1_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2df]"></a>get_rhr_zone2_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_rhr_zone2_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2e0]"></a>get_rhr_zone3_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_rhr_zone3_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2e1]"></a>get_rhr_zone4_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_rhr_zone4_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2e2]"></a>get_rhr_zone5_percentage_threshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_rhr_zone5_percentage_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>

<P><STRONG><a name="[2a3]"></a>get_serial_number_metric</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\buffer_services.o(i.get_serial_number_metric))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_serial_number_metric
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3fb]"></a>get_sport_type_for_aerobic_and_anaerobic_thresholds_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_sport_type_for_aerobic_and_anaerobic_thresholds_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[404]"></a>get_three_zone_heart_rate_limits_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_three_zone_heart_rate_limits_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[405]"></a>get_two_zone_heart_rate_limit_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_two_zone_heart_rate_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3d8]"></a>get_user_id</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_user_id))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_setup
</UL>

<P><STRONG><a name="[3fd]"></a>get_waist_circumference_metric</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_waist_circumference_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3f4]"></a>get_weight_metric</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.get_weight_metric))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[289]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\_build\gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[3d4]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[2a6]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, .\_build\gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[2a7]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, .\_build\gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[77]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\_build\gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[2aa]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, .\_build\gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gscm_service_changed_ind_send &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[145]"></a>hr_measurement_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\hr_measurement.o(i.hr_measurement_init))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_measurement_init
</UL>

<P><STRONG><a name="[2ab]"></a>im_address_resolve</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\_build\id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[172]"></a>im_ble_addr_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\_build\id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_ble_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_peer_blacklisted
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
</UL>

<P><STRONG><a name="[1c8]"></a>im_ble_evt_handler</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, .\_build\id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[25d]"></a>im_conn_handle_get</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, .\_build\id_manager.o(i.im_conn_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = im_conn_handle_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
</UL>

<P><STRONG><a name="[17b]"></a>im_find_duplicate_bonding_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\_build\id_manager.o(i.im_find_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = im_find_duplicate_bonding_data &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2ae]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, .\_build\id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
</UL>

<P><STRONG><a name="[2b1]"></a>im_master_id_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>

<P><STRONG><a name="[2b0]"></a>im_master_ids_compare</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\_build\id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[17c]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\id_manager.o(i.im_new_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[183]"></a>im_peer_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\_build\id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>

<P><STRONG><a name="[17a]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\_build\id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_evt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>

<P><STRONG><a name="[2b3]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\_build\id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[10d]"></a>init_f</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, .\_build\main.o(i.init_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_f
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_res_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_c
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Update_SCycle
</UL>

<P><STRONG><a name="[10b]"></a>init_var</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\_build\main.o(i.init_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_var &rArr; init_vars
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_vars
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_varc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Update_SCycle
</UL>

<P><STRONG><a name="[2b7]"></a>init_varc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\main.o(i.init_varc))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_c
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_var
</UL>

<P><STRONG><a name="[2b6]"></a>init_vars</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\_build\main.o(i.init_vars))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_vars
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_var
</UL>

<P><STRONG><a name="[2b8]"></a>insert_f</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\_build\main.o(i.insert_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_f &rArr; remove_f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_c
</UL>

<P><STRONG><a name="[2af]"></a>is_valid_irk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[2c8]"></a>lis2dw12_acceleration_raw_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2dw12_acceleration_raw_get &rArr; lis2dw12_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retira_valor
</UL>

<P><STRONG><a name="[2ca]"></a>lis2dw12_block_data_update_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2dw12_block_data_update_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2cc]"></a>lis2dw12_config</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, .\_build\main.o(i.lis2dw12_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lis2dw12_config &rArr; lis2dw12_power_mode_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_reset_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_reset_get
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_pin_int1_route_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_pin_int1_route_get
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_filter_path_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_filter_bandwidth_set
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_device_id_get
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>lis2dw12_data_rate_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_data_rate_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2cd]"></a>lis2dw12_device_id_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2dw12_device_id_get &rArr; lis2dw12_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2d2]"></a>lis2dw12_filter_bandwidth_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_filter_bandwidth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2dw12_filter_bandwidth_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2d1]"></a>lis2dw12_filter_path_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_filter_path_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_filter_path_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2d0]"></a>lis2dw12_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2dw12_full_scale_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2d4]"></a>lis2dw12_pin_int1_route_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_pin_int1_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2dw12_pin_int1_route_get &rArr; lis2dw12_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2d5]"></a>lis2dw12_pin_int1_route_set</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_pin_int1_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_pin_int1_route_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2d3]"></a>lis2dw12_power_mode_set</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_power_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lis2dw12_power_mode_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2c9]"></a>lis2dw12_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_reset_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_reset_get
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_pin_int1_route_set
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_pin_int1_route_get
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_filter_path_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_filter_bandwidth_set
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_device_id_get
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_acceleration_raw_get
</UL>

<P><STRONG><a name="[2ce]"></a>lis2dw12_reset_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2dw12_reset_get &rArr; lis2dw12_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2cf]"></a>lis2dw12_reset_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2dw12_reset_set &rArr; lis2dw12_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_write_reg
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[2cb]"></a>lis2dw12_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\_build\lis2dw12_reg.o(i.lis2dw12_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2dw12_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_reset_set
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_power_mode_set
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_pin_int1_route_set
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_full_scale_set
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_filter_path_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_filter_bandwidth_set
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_data_rate_set
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_block_data_update_set
</UL>

<P><STRONG><a name="[22f]"></a>load_user_info_metrics</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, .\_build\zonas_cardiacas.o(i.load_user_info_metrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = load_user_info_metrics &rArr; zones_info_init &rArr; get_hr_MYBEAT_V2_info &rArr; max_hr_get_mb2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zones_info_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone5_percentage_threshold
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone4_percentage_threshold
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone3_percentage_threshold
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone2_percentage_threshold
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone1_percentage_threshold
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resting_heart_rate_metric
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_zone_preference_calc
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_age_metric
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone5_percentage_threshold
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone4_percentage_threshold
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone3_percentage_threshold
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone2_percentage_threshold
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone1_percentage_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, .\_build\main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = main &rArr; nrf_ble_lesc_request_handler &rArr; compute_and_give_dhkey &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simulator_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;profile_setup
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_timers_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_enable
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_wdt_channel_alloc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_request_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_load
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_state_indicator_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_measurement_init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3c4]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCC\Bin\..\lib\armlib\mc_w.l(malloc.o)(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_name
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_8bits
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_16bits
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply
</UL>

<P><STRONG><a name="[299]"></a>max_hr_get_mb2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\_build\zonas_cardiacas.o(i.max_hr_get_mb2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = max_hr_get_mb2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_MYBEAT_V2_info
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_CIA_ATHLETICA_info
</UL>

<P><STRONG><a name="[2a0]"></a>max_hr_get_rhr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\zonas_cardiacas.o(i.max_hr_get_rhr))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_rhr_info
</UL>

<P><STRONG><a name="[1e6]"></a>mbedtls_aes_crypt_ecb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\aes.o(i.mbedtls_aes_crypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_encrypt
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[2fa]"></a>mbedtls_aes_decrypt</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, .\_build\aes.o(i.mbedtls_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[2fb]"></a>mbedtls_aes_encrypt</STRONG> (Thumb, 954 bytes, Stack size 40 bytes, .\_build\aes.o(i.mbedtls_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbedtls_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
</UL>

<P><STRONG><a name="[1e7]"></a>mbedtls_aes_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\aes.o(i.mbedtls_aes_free))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[1e4]"></a>mbedtls_aes_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\aes.o(i.mbedtls_aes_init))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[1e5]"></a>mbedtls_aes_setkey_enc</STRONG> (Thumb, 408 bytes, Stack size 20 bytes, .\_build\aes.o(i.mbedtls_aes_setkey_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbedtls_aes_setkey_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
</UL>

<P><STRONG><a name="[2fc]"></a>mbedtls_ctr_drbg_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbedtls_ctr_drbg_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_uninit
</UL>

<P><STRONG><a name="[2fd]"></a>mbedtls_ctr_drbg_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_init))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_init
</UL>

<P><STRONG><a name="[2fe]"></a>mbedtls_ctr_drbg_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_vector_generate
</UL>

<P><STRONG><a name="[2ff]"></a>mbedtls_ctr_drbg_random_with_add</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_random_with_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
</UL>

<P><STRONG><a name="[300]"></a>mbedtls_ctr_drbg_reseed</STRONG> (Thumb, 106 bytes, Stack size 408 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_drbg_update_internal
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_cipher_df
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_reseed
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[301]"></a>mbedtls_ctr_drbg_seed</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed_entropy_len
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_init
</UL>

<P><STRONG><a name="[302]"></a>mbedtls_ctr_drbg_seed_entropy_len</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, .\_build\ctr_drbg.o(i.mbedtls_ctr_drbg_seed_entropy_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
</UL>

<P><STRONG><a name="[305]"></a>next_id_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\_build\peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[306]"></a>nrf_atfifo_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[161]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\_build\nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[252]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\_build\nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[309]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[30a]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\_build\nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[253]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_schedule
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[1c6]"></a>nrf_atflags_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[231]"></a>nrf_atflags_fetch_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\_build\nrf_atflags.o(i.nrf_atflags_fetch_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[1a5]"></a>nrf_atflags_find_and_set_flag</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, .\_build\nrf_atflags.o(i.nrf_atflags_find_and_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[19b]"></a>nrf_atflags_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_lesc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;for_each_set_flag
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>

<P><STRONG><a name="[1c7]"></a>nrf_atflags_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
</UL>

<P><STRONG><a name="[2e8]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[2e6]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[269]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f8]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[1c4]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>

<P><STRONG><a name="[311]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_fetch_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_add
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[30e]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[30c]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[23f]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[30d]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[314]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[316]"></a>nrf_balloc_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\_build\nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[317]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\_build\nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[372]"></a>nrf_balloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\_build\nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[2ed]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\_build\nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, .\_build\nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[31e]"></a>nrf_ble_lesc_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, .\_build\nrf_ble_lesc.o(i.nrf_ble_lesc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_ble_lesc_init &rArr; nrf_ble_lesc_keypair_generate &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_keypair_generate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[320]"></a>nrf_ble_lesc_keypair_generate</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, .\_build\nrf_ble_lesc.o(i.nrf_ble_lesc_keypair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nrf_ble_lesc_keypair_generate &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_to_raw
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_byte_order_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_init
</UL>

<P><STRONG><a name="[323]"></a>nrf_ble_lesc_on_ble_evt</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, .\_build\nrf_ble_lesc.o(i.nrf_ble_lesc_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = nrf_ble_lesc_on_ble_evt &rArr; on_dhkey_request &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dhkey_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[325]"></a>nrf_ble_lesc_public_key_get</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\_build\nrf_ble_lesc.o(i.nrf_ble_lesc_public_key_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ble_lesc_public_key_get
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[2f8]"></a>nrf_ble_lesc_request_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\_build\nrf_ble_lesc.o(i.nrf_ble_lesc_request_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = nrf_ble_lesc_request_handler &rArr; compute_and_give_dhkey &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_and_give_dhkey
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[413]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\_build\nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[a5]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, .\_build\nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[87]"></a>nrf_crypto_backend_curve25519_ecdh_compute</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecdh.o(i.nrf_crypto_backend_curve25519_ecdh_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_curve25519_ecdh_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecdh.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>nrf_crypto_backend_curve25519_key_pair_generate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_curve25519_key_pair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_curve25519_key_pair_generate &rArr; oberon_vector_generate &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult_base
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oberon_vector_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>nrf_crypto_backend_curve25519_public_key_calculate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_curve25519_public_key_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_curve25519_public_key_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve25519_scalarmult_base
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>nrf_crypto_backend_ed25519_key_pair_generate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_ed25519_key_pair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_ed25519_key_pair_generate &rArr; oberon_vector_generate &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ed25519_public_key
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oberon_vector_generate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>nrf_crypto_backend_ed25519_private_key_from_raw</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_ed25519_private_key_from_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_ed25519_private_key_from_raw &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ed25519_public_key
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>nrf_crypto_backend_ed25519_public_key_calculate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_ed25519_public_key_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_crypto_backend_ed25519_public_key_calculate &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[328]"></a>nrf_crypto_backend_oberon_ecc_secp256r1_rng</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_ecc_secp256r1_rng))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nrf_crypto_backend_oberon_ecc_secp256r1_rng &rArr; nrf_crypto_rng_vector_generate_in_range &rArr; generate_in_range &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_vector_generate_in_range
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_secp256r1_key_pair_generate
</UL>

<P><STRONG><a name="[81]"></a>nrf_crypto_backend_oberon_private_key_from_raw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_private_key_from_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_crypto_backend_oberon_private_key_from_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>nrf_crypto_backend_oberon_private_key_to_raw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_private_key_to_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_crypto_backend_oberon_private_key_to_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>nrf_crypto_backend_oberon_public_key_from_raw</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_public_key_from_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_crypto_backend_oberon_public_key_from_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>nrf_crypto_backend_oberon_public_key_to_raw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_oberon_public_key_to_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_crypto_backend_oberon_public_key_to_raw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>nrf_crypto_backend_secp256r1_ecdh_compute</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecdh.o(i.nrf_crypto_backend_secp256r1_ecdh_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_secp256r1_ecdh_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_common_secret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecdh.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>nrf_crypto_backend_secp256r1_key_pair_generate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_secp256r1_key_pair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_secp256r1_key_pair_generate &rArr; nrf_crypto_backend_oberon_ecc_secp256r1_rng &rArr; nrf_crypto_rng_vector_generate_in_range &rArr; generate_in_range &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_public_key
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_oberon_ecc_secp256r1_rng
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>nrf_crypto_backend_secp256r1_public_key_calculate</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\oberon_backend_ecc.o(i.nrf_crypto_backend_secp256r1_public_key_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = nrf_crypto_backend_secp256r1_public_key_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ecdh_p256_public_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_crypto_ecc.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>nrf_crypto_ecc_byte_order_invert</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_ecc_byte_order_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_crypto_ecc_byte_order_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dhkey_request
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_and_give_dhkey
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_keypair_generate
</UL>

<P><STRONG><a name="[321]"></a>nrf_crypto_ecc_key_pair_generate</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_ecc_key_pair_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_crypto_ecc_key_pair_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_key_output_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_keypair_generate
</UL>

<P><STRONG><a name="[32b]"></a>nrf_crypto_ecc_public_key_from_raw</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_ecc_public_key_from_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_crypto_ecc_public_key_from_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_raw_input_check
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_key_output_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dhkey_request
</UL>

<P><STRONG><a name="[322]"></a>nrf_crypto_ecc_public_key_to_raw</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_ecc_public_key_to_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_crypto_ecc_public_key_to_raw
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_raw_output_prepare
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_key_input_check
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_keypair_generate
</UL>

<P><STRONG><a name="[234]"></a>nrf_crypto_ecdh_compute</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, .\_build\nrf_crypto_ecdh.o(i.nrf_crypto_ecdh_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_crypto_ecdh_compute
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_raw_output_prepare
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_internal_ecc_key_input_check
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_and_give_dhkey
</UL>

<P><STRONG><a name="[31f]"></a>nrf_crypto_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\_build\nrf_crypto_init.o(i.nrf_crypto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_crypto_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_init
</UL>

<P><STRONG><a name="[32d]"></a>nrf_crypto_internal_ecc_key_input_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_internal_ecc_key_input_check))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_compute
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_to_raw
</UL>

<P><STRONG><a name="[32a]"></a>nrf_crypto_internal_ecc_key_output_prepare</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_internal_ecc_key_output_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_from_raw
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_key_pair_generate
</UL>

<P><STRONG><a name="[32c]"></a>nrf_crypto_internal_ecc_raw_input_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_internal_ecc_raw_input_check))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_from_raw
</UL>

<P><STRONG><a name="[32e]"></a>nrf_crypto_internal_ecc_raw_output_prepare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\nrf_crypto_ecc.o(i.nrf_crypto_internal_ecc_raw_output_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_compute
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_to_raw
</UL>

<P><STRONG><a name="[337]"></a>nrf_crypto_is_initializing</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrf_crypto_init.o(i.nrf_crypto_is_initializing))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>

<P><STRONG><a name="[32f]"></a>nrf_crypto_rng_backend_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\nrf_hw_backend_rng_mbedtls.o(i.nrf_crypto_rng_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = nrf_crypto_rng_backend_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_seed
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_get
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>

<P><STRONG><a name="[332]"></a>nrf_crypto_rng_backend_reseed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\nrf_hw_backend_rng_mbedtls.o(i.nrf_crypto_rng_backend_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = nrf_crypto_rng_backend_reseed &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_get
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_reseed
</UL>

<P><STRONG><a name="[333]"></a>nrf_crypto_rng_backend_uninit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrf_hw_backend_rng_mbedtls.o(i.nrf_crypto_rng_backend_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_crypto_rng_backend_uninit &rArr; nrf_drv_rng_uninit &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_uninit
</UL>

<P><STRONG><a name="[292]"></a>nrf_crypto_rng_backend_vector_generate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrf_hw_backend_rng_mbedtls.o(i.nrf_crypto_rng_backend_vector_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;result_get
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_in_range
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate
</UL>

<P><STRONG><a name="[335]"></a>nrf_crypto_rng_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\_build\nrf_crypto_rng.o(i.nrf_crypto_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = nrf_crypto_rng_init &rArr; nrf_crypto_rng_backend_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_info_overflowed
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_is_initializing
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_hw_backend_init
</UL>

<P><STRONG><a name="[293]"></a>nrf_crypto_rng_reseed</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\_build\nrf_crypto_rng.o(i.nrf_crypto_rng_reseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = nrf_crypto_rng_reseed &rArr; nrf_crypto_rng_backend_reseed &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_reseed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_stack_info_overflowed
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate
</UL>

<P><STRONG><a name="[338]"></a>nrf_crypto_rng_uninit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\_build\nrf_crypto_rng.o(i.nrf_crypto_rng_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_crypto_rng_uninit &rArr; nrf_crypto_rng_backend_uninit &rArr; nrf_drv_rng_uninit &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_hw_backend_uninit
</UL>

<P><STRONG><a name="[235]"></a>nrf_crypto_rng_vector_generate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_crypto_rng.o(i.nrf_crypto_rng_vector_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oberon_vector_generate
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_and_give_dhkey
</UL>

<P><STRONG><a name="[329]"></a>nrf_crypto_rng_vector_generate_in_range</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, .\_build\nrf_crypto_rng.o(i.nrf_crypto_rng_vector_generate_in_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = nrf_crypto_rng_vector_generate_in_range &rArr; generate_in_range &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_in_range
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_oberon_ecc_secp256r1_rng
</UL>

<P><STRONG><a name="[1af]"></a>nrf_dfu_svci_vector_table_set</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\_build\nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = nrf_dfu_svci_vector_table_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[1b0]"></a>nrf_dfu_svci_vector_table_unset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\_build\nrf_dfu_svci.o(i.nrf_dfu_svci_vector_table_unset))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = nrf_dfu_svci_vector_table_unset &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_async_svci_init
</UL>

<P><STRONG><a name="[339]"></a>nrf_drv_clock_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\_build\nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[33c]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\_build\nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[251]"></a>nrf_drv_rng_block_rand</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\_build\nrf_drv_rng.o(i.nrf_drv_rng_block_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_rng_block_rand &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entropy_callback
</UL>

<P><STRONG><a name="[330]"></a>nrf_drv_rng_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\_build\nrf_drv_rng.o(i.nrf_drv_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_rng_init &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_init
</UL>

<P><STRONG><a name="[33e]"></a>nrf_drv_rng_rand</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, .\_build\nrf_drv_rng.o(i.nrf_drv_rng_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_block_rand
</UL>

<P><STRONG><a name="[334]"></a>nrf_drv_rng_uninit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\_build\nrf_drv_rng.o(i.nrf_drv_rng_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_rng_uninit &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_uninit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_stop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_uninit
</UL>

<P><STRONG><a name="[345]"></a>nrf_drv_spi_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, .\_build\nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[349]"></a>nrf_drv_uart_init</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, .\_build\nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[34f]"></a>nrf_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\_build\nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[206]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[350]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, .\_build\nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[203]"></a>nrf_fstorage_erase</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, .\_build\nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_save
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_fstorage_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\_build\nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_fstorage_init &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[423]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, .\_build\nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>

<P><STRONG><a name="[1ff]"></a>nrf_fstorage_read</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, .\_build\nrf_fstorage.o(i.nrf_fstorage_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = nrf_fstorage_read &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_load
</UL>

<P><STRONG><a name="[ac]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[b6]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[ae]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, .\_build\nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[204]"></a>nrf_fstorage_write</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, .\_build\nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_save
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[365]"></a>nrf_log_backend_add</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[35d]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, .\_build\nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_put
</UL>

<P><STRONG><a name="[363]"></a>nrf_log_backend_uart_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = nrf_log_backend_uart_init &rArr; uart_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[3d7]"></a>nrf_log_color_id_get</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[2ea]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_uart_init &rArr; uart_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 528 bytes, Stack size 88 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[138]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_reseed
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flash_info
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_evt_handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_shutdown_handler
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_and_give_dhkey
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_public_key_get
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_on_ble_evt
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
</UL>

<P><STRONG><a name="[12d]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_flash_info
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_transition_handle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_evt_handler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_dhkey_request
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_and_give_dhkey
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_on_ble_evt
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_keypair_generate
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page3_data_log
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page2_data_log
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_unset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_dfu_svci_vector_table_set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_evt_handler
</UL>

<P><STRONG><a name="[12f]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstorage_evt_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_peer_blacklisted
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_evt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page4_data_log
</UL>

<P><STRONG><a name="[181]"></a>nrf_log_frontend_std_3</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_std_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
</UL>

<P><STRONG><a name="[36a]"></a>nrf_log_frontend_std_4</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_std_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page1_data_log
</UL>

<P><STRONG><a name="[15e]"></a>nrf_log_frontend_std_5</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_frontend_std_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[361]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, .\_build\nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[2e9]"></a>nrf_log_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ringbuf_init
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_str_formatter_timestamp_freq_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>nrf_log_panic</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\_build\nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_treat
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>

<P><STRONG><a name="[360]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, .\_build\nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[36e]"></a>nrf_log_str_formatter_timestamp_freq_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_log_str_formatter.o(i.nrf_log_str_formatter_timestamp_freq_set))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[367]"></a>nrf_memobj_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[371]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[35e]"></a>nrf_memobj_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[36f]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[362]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[35f]"></a>nrf_memobj_read</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_read &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[368]"></a>nrf_memobj_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\_build\nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_write &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[140]"></a>nrf_pwr_mgmt_feed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_feed))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_evt_handler
</UL>

<P><STRONG><a name="[2ec]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\_build\nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwr_mgmt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f9]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\_build\nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>nrf_pwr_mgmt_shutdown</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\_build\nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonless_dfu_sdh_state_observer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_bootloader_start_finalize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_evt_handler
</UL>

<P><STRONG><a name="[376]"></a>nrf_queue_is_full</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[375]"></a>nrf_queue_push</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, .\_build\nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_queue_push &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
</UL>

<P><STRONG><a name="[341]"></a>nrf_queue_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\_build\nrf_queue.o(i.nrf_queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>

<P><STRONG><a name="[344]"></a>nrf_queue_reset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\_build\nrf_queue.o(i.nrf_queue_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
</UL>

<P><STRONG><a name="[370]"></a>nrf_ringbuf_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\nrf_ringbuf.o(i.nrf_ringbuf_init))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[1e0]"></a>nrf_sdh_ant_enable</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, .\_build\nrf_sdh_ant.o(i.nrf_sdh_ant_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nrf_sdh_ant_enable &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[37b]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[1de]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, .\_build\nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[1df]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, .\_build\nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[37c]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\_build\nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = nrf_sdh_disable_request &rArr; softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[1dd]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\_build\nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[129]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[2b4]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[355]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[373]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
</UL>

<P><STRONG><a name="[37a]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\_build\nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown_process
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_evts_poll
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
</UL>

<P><STRONG><a name="[3e9]"></a>nrf_sortlist_add</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\_build\nrf_sortlist.o(i.nrf_sortlist_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sortlist_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3e8]"></a>nrf_sortlist_peek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\nrf_sortlist.o(i.nrf_sortlist_peek))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[418]"></a>nrf_sortlist_pop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrf_sortlist.o(i.nrf_sortlist_pop))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>

<P><STRONG><a name="[41a]"></a>nrf_sortlist_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\nrf_sortlist.o(i.nrf_sortlist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
</UL>

<P><STRONG><a name="[382]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\_build\nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[12e]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, .\_build\nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_peer_blacklisted
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_transition_handle
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[33b]"></a>nrfx_clock_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\_build\nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[33a]"></a>nrfx_clock_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[33d]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[155]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, .\_build\nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[159]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, .\_build\nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[245]"></a>nrfx_gpiote_in_is_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.nrfx_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[158]"></a>nrfx_gpiote_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\_build\nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[157]"></a>nrfx_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.nrfx_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[388]"></a>nrfx_prs_acquire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\_build\nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[38a]"></a>nrfx_prs_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[38b]"></a>nrfx_pwm_init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, .\_build\nrfx_pwm.o(i.nrfx_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrfx_pwm_init &rArr; configure_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[38d]"></a>nrfx_pwm_simple_playback</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\_build\nrfx_pwm.o(i.nrfx_pwm_simple_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_pwm_simple_playback &rArr; start_playback &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_playback
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_sequence_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[33f]"></a>nrfx_rng_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, .\_build\nrfx_rng.o(i.nrfx_rng_init))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
</UL>

<P><STRONG><a name="[340]"></a>nrfx_rng_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\nrfx_rng.o(i.nrfx_rng_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rng_start
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>

<P><STRONG><a name="[342]"></a>nrfx_rng_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_rng.o(i.nrfx_rng_stop))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
</UL>

<P><STRONG><a name="[343]"></a>nrfx_rng_uninit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\nrfx_rng.o(i.nrfx_rng_uninit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_uninit
</UL>

<P><STRONG><a name="[390]"></a>nrfx_saadc_channel_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, .\_build\nrfx_saadc.o(i.nrfx_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[392]"></a>nrfx_saadc_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, .\_build\nrfx_saadc.o(i.nrfx_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[186]"></a>nrfx_saadc_sample_convert</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, .\_build\nrfx_saadc.o(i.nrfx_saadc_sample_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_sample_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_meas_timeout_handler
</UL>

<P><STRONG><a name="[346]"></a>nrfx_spim_init</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, .\_build\nrfx_spim.o(i.nrfx_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[348]"></a>nrfx_spim_xfer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\_build\nrfx_spim.o(i.nrfx_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[89]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[34b]"></a>nrfx_uart_init</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, .\_build\nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[397]"></a>nrfx_uart_tx</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, .\_build\nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[398]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[34e]"></a>nrfx_uart_uninit</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, .\_build\nrfx_uart.o(i.nrfx_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[8a]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[34a]"></a>nrfx_uarte_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\_build\nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[39c]"></a>nrfx_uarte_tx</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, .\_build\nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[39e]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[34d]"></a>nrfx_uarte_uninit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, .\_build\nrfx_uarte.o(i.nrfx_uarte_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[2f6]"></a>nrfx_wdt_channel_alloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\_build\nrfx_wdt.o(i.nrfx_wdt_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_wdt_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>nrfx_wdt_channel_feed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_wdt.o(i.nrfx_wdt_channel_feed))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HR_advdata_manuf_data_update
</UL>

<P><STRONG><a name="[2f7]"></a>nrfx_wdt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\nrfx_wdt.o(i.nrfx_wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f5]"></a>nrfx_wdt_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\_build\nrfx_wdt.o(i.nrfx_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_wdt_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a5]"></a>pdb_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, .\_build\peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = pdb_init &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[74]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, .\_build\peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = pdb_pds_evt_handler &rArr; reattempt_previous_operations &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[290]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>

<P><STRONG><a name="[2b2]"></a>pdb_peer_free</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, .\_build\peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[179]"></a>pdb_write_buf_get</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, .\_build\peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2a8]"></a>pdb_write_buf_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
</UL>

<P><STRONG><a name="[180]"></a>pdb_write_buf_store</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\_build\peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[3b3]"></a>pds_init</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, .\_build\peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[3b6]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[3b8]"></a>pds_next_peer_id_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[2ad]"></a>pds_peer_data_iterate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, .\_build\peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[2ac]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[20c]"></a>pds_peer_data_read</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, .\_build\peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;car_update_needed
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>

<P><STRONG><a name="[2a5]"></a>pds_peer_data_store</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, .\_build\peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_car_value
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
</UL>

<P><STRONG><a name="[17e]"></a>pds_peer_id_allocate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[3ac]"></a>pds_peer_id_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[3b1]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
</UL>

<P><STRONG><a name="[3b5]"></a>peer_id_allocate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[3bd]"></a>peer_id_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\_build\peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_delete &rArr; claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[261]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_free &rArr; release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[3b7]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
</UL>

<P><STRONG><a name="[3b9]"></a>peer_id_get_next_used</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\_build\peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[3b4]"></a>peer_id_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\peer_id.o(i.peer_id_init))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[3be]"></a>peer_id_is_allocated</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[3c0]"></a>peer_id_is_deleted</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[3ae]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\_build\pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[3a7]"></a>pm_buffer_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[3af]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\_build\pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_buffer_ptr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[3c6]"></a>pm_buffer_release</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\_build\pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[12b]"></a>pm_conn_sec_status_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_conn_sec_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pm_conn_sec_status_get &rArr; sm_conn_sec_status_get &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
</UL>

<P><STRONG><a name="[12c]"></a>pm_conn_secure</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\peer_manager.o(i.pm_conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
</UL>

<P><STRONG><a name="[0]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>pm_gscm_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_gscm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[3ca]"></a>pm_handler_flash_clean</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, .\_build\peer_manager_handler.o(i.pm_handler_flash_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = pm_handler_flash_clean &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_stat
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean_on_return
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_highest
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean_on_return
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_highest
</UL>

<P><STRONG><a name="[3d0]"></a>pm_handler_flash_clean_on_return</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, .\_build\peer_manager_handler.o(i.pm_handler_flash_clean_on_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pm_handler_flash_clean_on_return &rArr;  pm_handler_flash_clean (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[3c9]"></a>pm_handler_on_pm_evt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, .\_build\peer_manager_handler.o(i.pm_handler_on_pm_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = pm_handler_on_pm_evt &rArr; conn_secure &rArr; _conn_secure &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_pm_evt_log
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[3d1]"></a>pm_handler_pm_evt_log</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, .\_build\peer_manager_handler.o(i.pm_handler_pm_evt_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = pm_handler_pm_evt_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
</UL>

<P><STRONG><a name="[72]"></a>pm_im_evt_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_im_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[3c1]"></a>pm_init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, .\_build\peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[75]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, .\_build\peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = pm_pdb_evt_handler &rArr; rank_vars_update &rArr; pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[3cf]"></a>pm_peer_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[3cc]"></a>pm_peer_rank_highest</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, .\_build\peer_manager.o(i.pm_peer_rank_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = pm_peer_rank_highest &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[3ce]"></a>pm_peer_ranks_get</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, .\_build\peer_manager.o(i.pm_peer_ranks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rank_vars_update
</UL>

<P><STRONG><a name="[139]"></a>pm_peers_delete</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, .\_build\peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>

<P><STRONG><a name="[3c3]"></a>pm_register</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[3c2]"></a>pm_sec_params_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[7a]"></a>pm_sm_evt_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>pwm1_handler</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, .\_build\controle_leds.o(i.pwm1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pwm1_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pulso
</UL>
<BR>[Address Reference Count : 1]<UL><LI> controle_leds.o(i.pwm_init)
</UL>
<P><STRONG><a name="[2f2]"></a>pwm_init</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, .\_build\controle_leds.o(i.pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = pwm_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b9]"></a>remove_f</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, .\_build\main.o(i.remove_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = remove_f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_f
</UL>

<P><STRONG><a name="[3de]"></a>reply</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\_build\main.o(i.reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reply &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_to_Hex
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3e0]"></a>reply_16bits</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\_build\main.o(i.reply_16bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reply_16bits &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3e1]"></a>reply_8bits</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, .\_build\main.o(i.reply_8bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reply_8bits &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3e2]"></a>reply_name</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, .\_build\main.o(i.reply_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reply_name &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[3ee]"></a>reply_serial_number</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, .\_build\main.o(i.reply_serial_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reply_serial_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
</UL>

<P><STRONG><a name="[297]"></a>retira_valor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\_build\main.o(i.retira_valor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = retira_valor &rArr; lis2dw12_acceleration_raw_get &rArr; lis2dw12_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_acceleration_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel
</UL>

<P><STRONG><a name="[54]"></a>saadc_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\main.o(i.saadc_callback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.saadc_init)
</UL>
<P><STRONG><a name="[2f3]"></a>saadc_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\_build\main.o(i.saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = saadc_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>sc_ctrlpt_event_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\_build\main.o(i.sc_ctrlpt_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[412]"></a>sensorsim_decrement</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\_build\sensorsim.o(i.sensorsim_decrement))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensorsim_decrement
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_measure
</UL>

<P><STRONG><a name="[411]"></a>sensorsim_increment</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\_build\sensorsim.o(i.sensorsim_increment))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensorsim_increment
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_measure
</UL>

<P><STRONG><a name="[410]"></a>sensorsim_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\sensorsim.o(i.sensorsim_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simulator_init
</UL>

<P><STRONG><a name="[23a]"></a>sensorsim_measure</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\sensorsim.o(i.sensorsim_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensorsim_measure &rArr; sensorsim_increment
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_increment
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_decrement
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_sim_measurement
</UL>

<P><STRONG><a name="[21b]"></a>set_VO2_max_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_VO2_max_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[226]"></a>set_aerobic_heart_rate_lower_limit_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_aerobic_heart_rate_lower_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[227]"></a>set_aerobic_heart_rate_upper_limit_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_aerobic_heart_rate_upper_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[21f]"></a>set_aerobic_threshold_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_aerobic_threshold_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[216]"></a>set_age_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_age_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[228]"></a>set_anaerobic_heart_rate_lower_limit_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_anaerobic_heart_rate_lower_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[220]"></a>set_anaerobic_threshold_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_anaerobic_threshold_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[217]"></a>set_date_of_birth_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_date_of_birth_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[222]"></a>set_date_of_threshold_assessment_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_date_of_threshold_assessment_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[215]"></a>set_email_address_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_email_address_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[224]"></a>set_fat_burn_heart_rate_lower_limit_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_fat_burn_heart_rate_lower_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[225]"></a>set_fat_burn_heart_rate_upper_limit_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_fat_burn_heart_rate_upper_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[213]"></a>set_first_name_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_first_name_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[22d]"></a>set_fitnes_index_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_fitnes_index_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[229]"></a>set_five_zone_heart_rate_limits_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_five_zone_heart_rate_limits_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[218]"></a>set_gender_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_gender_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[21c]"></a>set_heart_rate_max_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_heart_rate_max_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[21a]"></a>set_height_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_height_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[211]"></a>set_hr_zone_preference_calc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_hr_zone_preference_calc))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[22c]"></a>set_language_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_language_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[214]"></a>set_last_name_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_last_name_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[21e]"></a>set_maximum_recommended_heart_rate_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_maximum_recommended_heart_rate_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[21d]"></a>set_resting_heart_rate_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_resting_heart_rate_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[20f]"></a>set_resting_heart_rate_value_threshold</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_resting_heart_rate_value_threshold))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[212]"></a>set_serial_number_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_serial_number_metric))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[221]"></a>set_sport_type_for_aerobic_and_anaerobic_thresholds_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_sport_type_for_aerobic_and_anaerobic_thresholds_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[22a]"></a>set_three_zone_heart_rate_limits_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_three_zone_heart_rate_limits_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[22b]"></a>set_two_zone_heart_rate_limit_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_two_zone_heart_rate_limit_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[210]"></a>set_user_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_user_id))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[223]"></a>set_waist_circumference_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_waist_circumference_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[219]"></a>set_weight_metric</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.set_weight_metric))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[1c9]"></a>sm_ble_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\_build\security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_on_ble_evt
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3c7]"></a>sm_conn_sec_status_get</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, .\_build\security_manager.o(i.sm_conn_sec_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sm_conn_sec_status_get &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_status
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_lesc
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_is_sufficient
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>

<P><STRONG><a name="[3d2]"></a>sm_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\_build\security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sm_init &rArr; nrf_ble_lesc_init &rArr; nrf_ble_lesc_keypair_generate &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[3c8]"></a>sm_link_secure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\security_manager.o(i.sm_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
</UL>

<P><STRONG><a name="[76]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\_build\security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sm_pdb_evt_handler &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[40e]"></a>sm_sec_is_sufficient</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\security_manager.o(i.sm_sec_is_sufficient))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sm_sec_is_sufficient &rArr; sm_conn_sec_status_get &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
</UL>

<P><STRONG><a name="[3d6]"></a>sm_sec_params_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[79]"></a>sm_smd_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\_build\security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = sm_smd_evt_handler &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[414]"></a>smd_ble_evt_handler</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, .\_build\security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[3d3]"></a>smd_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, .\_build\security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smd_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[2c4]"></a>smd_link_secure</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\_build\security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smd_link_secure &rArr; ble_conn_state_role
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[416]"></a>smd_params_reply</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, .\_build\security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_peer_blacklisted
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_keyset_fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[43]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\main.o(i.spi_event_handler))
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.lis2dw12_config)
<LI> main.o(i.main)
<LI> main.o(i.spi_init)
</UL>
<P><STRONG><a name="[2f1]"></a>spi_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\_build\main.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = spi_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c]"></a>store_car_value</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, .\_build\gatt_cache_manager.o(i.store_car_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = store_car_value &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[10f]"></a>update_c</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\_build\main.o(i.update_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = update_c &rArr; ADS018_Set_Result_C
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_f
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_varc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_f
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_f
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Set_Result_C
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Update_SCycle
</UL>

<P><STRONG><a name="[10e]"></a>update_s</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, .\_build\main.o(i.update_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_s
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS018_Update_SCycle
</UL>

<P><STRONG><a name="[200]"></a>wait_for_flash_ready</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\buffer_services.o(i.wait_for_flash_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wait_for_flash_ready &rArr; nrf_fstorage_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_save
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_load
</UL>

<P><STRONG><a name="[48]"></a>wdt_event_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\main.o(i.wdt_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_event_handler &rArr; bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3b2]"></a>write_buf_store</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, .\_build\peer_database.o(i.write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
</UL>

<P><STRONG><a name="[2e4]"></a>zones_info_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, .\_build\zonas_cardiacas.o(i.zones_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = zones_info_init &rArr; get_hr_MYBEAT_V2_info &rArr; max_hr_get_mb2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_zone_select
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_rhr_info
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_SPIVI_info
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_MYBEAT_V2_info
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_CIA_ATHLETICA_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_user_info_metrics
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>SPIVI_zone1_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.SPIVI_zone1_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[5c]"></a>SPIVI_zone2_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.SPIVI_zone2_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[5d]"></a>SPIVI_zone3_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.SPIVI_zone3_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[5e]"></a>SPIVI_zone4_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.SPIVI_zone4_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[5f]"></a>SPIVI_zone5_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.SPIVI_zone5_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[134]"></a>advertising_init</STRONG> (Thumb, 154 bytes, Stack size 176 bytes, .\_build\main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = advertising_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>ant_plus_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\main.o(i.ant_plus_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[99]"></a>app_shutdown_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\_build\main.o(i.app_shutdown_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_shutdown_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(pwr_mgmt_data0)
</UL>
<P><STRONG><a name="[169]"></a>application_timers_start</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, .\_build\main.o(i.application_timers_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = application_timers_start &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>battery_level_meas_timeout_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\main.o(i.battery_level_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = battery_level_meas_timeout_handler &rArr; nrfx_saadc_sample_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[6a]"></a>biblioteca_phillips_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\main.o(i.biblioteca_phillips_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[65]"></a>ble_dfu_evt_handler</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, .\_build\main.o(i.ble_dfu_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ble_dfu_evt_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_connected
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_modes_config_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[ab]"></a>ble_evt_handler</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, .\_build\main.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_request
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[1dc]"></a>ble_stack_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, .\_build\main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ant_enable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_plus_key_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>button_and_leds_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, .\_build\main.o(i.button_and_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = button_and_leds_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>buttonless_dfu_sdh_state_observer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.buttonless_dfu_sdh_state_observer))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = buttonless_dfu_sdh_state_observer &rArr; nrf_pwr_mgmt_shutdown &rArr; shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[47]"></a>conn_params_error_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[69]"></a>csc_meas_timeout_handler</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, .\_build\main.o(i.csc_meas_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = csc_meas_timeout_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_sim_measurement
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_rsp_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_measurement_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timers_init)
</UL>
<P><STRONG><a name="[239]"></a>csc_sim_measurement</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, .\_build\main.o(i.csc_sim_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = csc_sim_measurement &rArr; sensorsim_measure &rArr; sensorsim_increment
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_measure
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_meas_timeout_handler
</UL>

<P><STRONG><a name="[3d]"></a>disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\_build\main.o(i.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = disconnect &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_dfu_evt_handler)
</UL>
<P><STRONG><a name="[27e]"></a>gap_params_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, .\_build\main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gap_params_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>gatt_evt_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, .\_build\main.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = gatt_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_gatt_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[59]"></a>hr_zone_preference_calc_write_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\main.o(i.hr_zone_preference_calc_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[22e]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, .\_build\main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_nv_update_request
</UL>

<P><STRONG><a name="[347]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, .\_build\main.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
</UL>

<P><STRONG><a name="[35a]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[209]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\_build\main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
</UL>

<P><STRONG><a name="[208]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\_build\main.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
</UL>

<P><STRONG><a name="[20a]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\main.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_and_leds_init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2dw12_config
</UL>

<P><STRONG><a name="[56]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\main.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[36]"></a>on_adv_evt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\_build\main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = on_adv_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[46]"></a>on_conn_params_evt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2f0]"></a>peer_manager_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, .\_build\main.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = peer_manager_init &rArr; pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>platform_read</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, .\_build\main.o(i.platform_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = platform_read &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.lis2dw12_config)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[41]"></a>platform_write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\_build\main.o(i.platform_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = platform_write &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.lis2dw12_config)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[52]"></a>pm_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\_build\main.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = pm_evt_handler &rArr; pm_handler_flash_clean &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[2f4]"></a>profile_setup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\_build\main.o(i.profile_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = profile_setup &rArr; ant_hrm_sens_open &rArr; ant_message_send &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_id
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_state_indicator_channel_opened
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_sens_open
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_sens_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>rhr_zone1_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.rhr_zone1_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[61]"></a>rhr_zone2_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.rhr_zone2_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[62]"></a>rhr_zone3_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.rhr_zone3_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[63]"></a>rhr_zone4_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.rhr_zone4_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[64]"></a>rhr_zone5_threshold_write_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\main.o(i.rhr_zone5_threshold_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[1bf]"></a>rw_request</STRONG> (Thumb, 646 bytes, Stack size 16 bytes, .\_build\main.o(i.rw_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rw_request &rArr; reply_name &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weight_metric
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_waist_circumference_metric
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_id
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_two_zone_heart_rate_limit_metric
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_three_zone_heart_rate_limits_metric
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sport_type_for_aerobic_and_anaerobic_thresholds_metric
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_number_metric
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone5_percentage_threshold
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone4_percentage_threshold
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone3_percentage_threshold
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone2_percentage_threshold
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rhr_zone1_percentage_threshold
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_resting_heart_rate_metric
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_metrics
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maximum_recommended_heart_rate_metric
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_last_name_metric
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_language_metric
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hr_zone_preference_calc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_height_metric
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_heart_rate_max_metric
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gender_metric
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_five_zone_heart_rate_limits_metric
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fitnes_index_metric
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_name_metric
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_burn_heart_rate_upper_limit_metric
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_burn_heart_rate_lower_limit_metric
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_email_address_metric
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date_of_threshold_assessment_metric
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date_of_birth_metric
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_anaerobic_threshold_metric
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_anaerobic_heart_rate_lower_limit_metric
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_age_metric
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aerobic_threshold_metric
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aerobic_heart_rate_upper_limit_metric
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aerobic_heart_rate_lower_limit_metric
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VO2_max_metric
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone5_percentage_threshold
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone4_percentage_threshold
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone3_percentage_threshold
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone2_percentage_threshold
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_SPIVI_zone1_percentage_threshold
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_serial_number
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_name
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_8bits
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply_16bits
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reply
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[2ef]"></a>sensor_simulator_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, .\_build\main.o(i.sensor_simulator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sensor_simulator_init
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>serial_number_write_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\main.o(i.serial_number_write_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_number_write_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[2ee]"></a>services_init</STRONG> (Thumb, 308 bytes, Stack size 176 bytes, .\_build\main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = services_init &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_serial_number_metric
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rus_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2eb]"></a>timers_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, .\_build\main.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = timers_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>user_id_write_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\main.o(i.user_id_write_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[124]"></a>SPIVI_zone1_threshold_char_add</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.SPIVI_zone1_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIVI_zone1_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[125]"></a>SPIVI_zone2_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.SPIVI_zone2_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIVI_zone2_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[126]"></a>SPIVI_zone3_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.SPIVI_zone3_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIVI_zone3_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[127]"></a>SPIVI_zone4_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.SPIVI_zone4_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIVI_zone4_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[128]"></a>SPIVI_zone5_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.SPIVI_zone5_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIVI_zone5_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[1d1]"></a>on_write</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, .\_build\ble_rtcs.o(i.on_write))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_on_ble_evt
</UL>

<P><STRONG><a name="[1cc]"></a>rhr_zone1_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.rhr_zone1_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rhr_zone1_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[1cd]"></a>rhr_zone2_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.rhr_zone2_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rhr_zone2_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[1ce]"></a>rhr_zone3_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.rhr_zone3_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rhr_zone3_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[1cf]"></a>rhr_zone4_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.rhr_zone4_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rhr_zone4_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[1d0]"></a>rhr_zone5_threshold_char_add</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, .\_build\ble_rtcs.o(i.rhr_zone5_threshold_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rhr_zone5_threshold_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rtcs_init
</UL>

<P><STRONG><a name="[1d4]"></a>hr_zone_preference_calc_char_add</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, .\_build\ble_rus.o(i.hr_zone_preference_calc_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hr_zone_preference_calc_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rus_init
</UL>

<P><STRONG><a name="[1d5]"></a>serial_number_char_add</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, .\_build\ble_rus.o(i.serial_number_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_number_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rus_init
</UL>

<P><STRONG><a name="[1d3]"></a>user_id_char_add</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, .\_build\ble_rus.o(i.user_id_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = user_id_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rus_init
</UL>

<P><STRONG><a name="[1e2]"></a>on_write</STRONG> (Thumb, 518 bytes, Stack size 16 bytes, .\_build\ble_uds.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uds_on_ble_evt
</UL>

<P><STRONG><a name="[2]"></a>fstorage_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, .\_build\buffer_services.o(i.fstorage_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fstorage_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buffer_services.o(fs_data)
</UL>
<P><STRONG><a name="[1fd]"></a>print_flash_info</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\_build\buffer_services.o(i.print_flash_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = print_flash_info &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_init
</UL>

<P><STRONG><a name="[1a8]"></a>csc_measurement_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\_build\ble_cscs.o(i.csc_measurement_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = csc_measurement_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_measurement_send
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_init
</UL>

<P><STRONG><a name="[1aa]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\ble_cscs.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csc_measurement_encode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_cscs_init
</UL>

<P><STRONG><a name="[1e9]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[71]"></a>bsp_button_event_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\_build\bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>bsp_led_indication</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, .\_build\bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[3e]"></a>button_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[1f3]"></a>leds_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\_build\bsp.o(i.leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = leds_off &rArr; bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[132]"></a>advertising_buttons_configure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\_build\bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = advertising_buttons_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[a0]"></a>ble_evt_handler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, .\_build\bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_evt_handler &rArr; advertising_buttons_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3a]"></a>blacklisted_peers_state_transition_handle</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\_build\auth_status_tracker.o(i.blacklisted_peers_state_transition_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = blacklisted_peers_state_transition_handle &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_update
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auth_status_tracker.o(i.ast_init)
</UL>
<P><STRONG><a name="[174]"></a>blacklisted_peers_state_update</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, .\_build\auth_status_tracker.o(i.blacklisted_peers_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = blacklisted_peers_state_update
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ast_auth_error_notify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blacklisted_peers_state_transition_handle
</UL>

<P><STRONG><a name="[188]"></a>ble_device_addr_encode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\_build\ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[18b]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\_build\ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[18c]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\_build\ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[18e]"></a>name_encode</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, .\_build\ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[18d]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\_build\ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[189]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[18a]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, .\_build\ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[422]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, .\_build\ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[191]"></a>adv_set_data_size_max_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\ble_advertising.o(i.adv_set_data_size_max_get))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_advdata_update
</UL>

<P><STRONG><a name="[194]"></a>flags_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\_build\ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
</UL>

<P><STRONG><a name="[195]"></a>phy_is_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[196]"></a>use_whitelist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\ble_advertising.o(i.use_whitelist))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[a1]"></a>ble_evt_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, .\_build\ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_evt_handler &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[1c3]"></a>conn_params_negotiation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\_build\ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1c0]"></a>instance_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1c1]"></a>is_conn_params_ok</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, .\_build\ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1c2]"></a>send_error_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\ble_conn_params.o(i.send_error_evt))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3b]"></a>update_timeout_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\_build\ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[9d]"></a>ble_evt_handler</STRONG> (Thumb, 278 bytes, Stack size 128 bytes, .\_build\ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ble_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_toggle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[1a6]"></a>flag_toggle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\ble_conn_state.o(i.flag_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>

<P><STRONG><a name="[19d]"></a>for_each_set_flag</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, .\_build\ble_conn_state.o(i.for_each_set_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_connected
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[19f]"></a>user_flag_is_acquired</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>

<P><STRONG><a name="[20d]"></a>set_security_req</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\_build\ble_srv_common.o(i.set_security_req))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[40]"></a>apply_pending_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\gatt_cache_manager.o(i.apply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = apply_pending_handle &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.gcm_ble_evt_handler)
</UL>
<P><STRONG><a name="[20b]"></a>car_update_needed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\gatt_cache_manager.o(i.car_update_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = car_update_needed &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[6f]"></a>car_update_pending_handle</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\_build\gatt_cache_manager.o(i.car_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = car_update_pending_handle &rArr; ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[6e]"></a>db_update_pending_handle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\_build\gatt_cache_manager.o(i.db_update_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = db_update_pending_handle &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.update_pending_flags_check)
</UL>
<P><STRONG><a name="[25b]"></a>evt_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[170]"></a>local_db_apply_in_evt</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, .\_build\gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_handle
</UL>

<P><STRONG><a name="[28a]"></a>local_db_update</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\gatt_cache_manager.o(i.local_db_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = local_db_update &rArr; ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[240]"></a>local_db_update_in_evt</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, .\_build\gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;db_update_pending_handle
</UL>

<P><STRONG><a name="[55]"></a>sc_send_pending_handle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\gatt_cache_manager.o(i.sc_send_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = sc_send_pending_handle &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(i.service_changed_pending_flags_check)
</UL>
<P><STRONG><a name="[2e5]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, .\_build\gatt_cache_manager.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[28d]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = service_changed_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[409]"></a>service_changed_send_in_evt</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, .\_build\gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_send_pending_handle
</UL>

<P><STRONG><a name="[28b]"></a>update_pending_flags_check</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\_build\gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = update_pending_flags_check &rArr; ble_conn_state_for_each_set_user_flag &rArr; for_each_set_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_for_each_set_user_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_pdb_evt_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[25c]"></a>evt_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\gatts_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = evt_send &rArr; im_conn_handle_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>

<P><STRONG><a name="[2a9]"></a>service_changed_pending_set</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, .\_build\gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = service_changed_pending_set &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[23e]"></a>data_length_update</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, .\_build\nrf_ble_gatt.o(i.data_length_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_data_length_update_request_evt
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[318]"></a>link_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[319]"></a>on_connected_evt</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\_build\nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = on_connected_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[31c]"></a>on_data_length_update_evt</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, .\_build\nrf_ble_gatt.o(i.on_data_length_update_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = on_data_length_update_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[31d]"></a>on_data_length_update_request_evt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\_build\nrf_ble_gatt.o(i.on_data_length_update_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = on_data_length_update_request_evt &rArr; data_length_update &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[31b]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, .\_build\nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[31a]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\_build\nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = on_exchange_mtu_rsp_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[233]"></a>compute_and_give_dhkey</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, .\_build\nrf_ble_lesc.o(i.compute_and_give_dhkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = compute_and_give_dhkey &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_vector_generate
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecdh_compute
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_byte_order_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_request_handler
</UL>

<P><STRONG><a name="[324]"></a>on_dhkey_request</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, .\_build\nrf_ble_lesc.o(i.on_dhkey_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = on_dhkey_request &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_public_key_from_raw
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_ecc_byte_order_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_on_ble_evt
</UL>

<P><STRONG><a name="[326]"></a>user_mem_reply</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\_build\nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[51]"></a>fds_evt_handler</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, .\_build\peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_within_pm_range
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[25e]"></a>file_id_within_pm_range</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.file_id_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[25f]"></a>pds_evt_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete_process
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[260]"></a>peer_data_delete_process</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, .\_build\peer_data_storage.o(i.peer_data_delete_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[3bb]"></a>peer_data_find</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\_build\peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>

<P><STRONG><a name="[3ba]"></a>peer_data_id_is_valid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\_build\peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[3a9]"></a>pdb_evt_send</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\_build\peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reattempt_previous_operations
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[3b0]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\_build\peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
</UL>

<P><STRONG><a name="[3aa]"></a>reattempt_previous_operations</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, .\_build\peer_database.o(i.reattempt_previous_operations))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = reattempt_previous_operations &rArr; write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_store
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[3ad]"></a>write_buffer_record_find</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\_build\peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[3ab]"></a>write_buffer_record_find_next</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\_build\peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>

<P><STRONG><a name="[3a6]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[3a8]"></a>write_buffer_record_release</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\_build\peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[230]"></a>claim</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\_build\peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = claim &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_find_and_set_flag
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_fetch_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[3bf]"></a>release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[a2]"></a>ble_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\_build\peer_manager.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = ble_evt_handler &rArr; sm_ble_evt_handler &rArr; smd_ble_evt_handler &rArr; auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_manager.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3cb]"></a>evt_send</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, .\_build\peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gscm_evt_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
</UL>

<P><STRONG><a name="[3d5]"></a>rank_vars_update</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\_build\peer_manager.o(i.rank_vars_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rank_vars_update &rArr; pm_peer_ranks_get &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_ranks_get
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_rank_highest
</UL>

<P><STRONG><a name="[12a]"></a>_conn_secure</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, .\_build\peer_manager_handler.o(i._conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = _conn_secure &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_secure
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_secure
</UL>

<P><STRONG><a name="[238]"></a>conn_secure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\peer_manager_handler.o(i.conn_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = conn_secure &rArr; _conn_secure &rArr; pm_conn_secure &rArr; sm_link_secure &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_conn_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_on_pm_evt
</UL>

<P><STRONG><a name="[3cd]"></a>rank_highest</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, .\_build\peer_manager_handler.o(i.rank_highest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = rank_highest &rArr;  pm_handler_flash_clean (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_handler_flash_clean
</UL>

<P><STRONG><a name="[304]"></a>mutex_lock_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\pm_buffer.o(i.mutex_lock_status_get))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
</UL>

<P><STRONG><a name="[13c]"></a>allow_repairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\security_dispatcher.o(i.allow_repairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = allow_repairing &rArr; ble_conn_state_user_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[177]"></a>auth_status_success_process</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, .\_build\security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = auth_status_success_process &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete_process &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_find_duplicate_bonding_data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_success_evt_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allow_repairing
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[237]"></a>conn_sec_failure</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, .\_build\security_dispatcher.o(i.conn_sec_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>

<P><STRONG><a name="[250]"></a>encryption_failure</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = encryption_failure &rArr; conn_sec_failure &rArr; ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[185]"></a>evt_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_success_evt_send
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[27a]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[2c5]"></a>link_secure_failure</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, .\_build\security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[2c6]"></a>pairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\security_dispatcher.o(i.pairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pairing &rArr; ble_conn_state_user_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[2c7]"></a>pairing_failure</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, .\_build\security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = pairing_failure &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[182]"></a>pairing_success_evt_send</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\_build\security_dispatcher.o(i.pairing_success_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pairing_success_evt_send &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[40a]"></a>sec_info_request_process</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, .\_build\security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sec_info_request_process &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_unexpected_error
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[40c]"></a>sec_keyset_fill</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, .\_build\security_dispatcher.o(i.sec_keyset_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[40b]"></a>sec_proc_start</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, .\_build\security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sec_proc_start &rArr; ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[17d]"></a>send_config_req</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, .\_build\security_dispatcher.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_config_req &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[17f]"></a>send_unexpected_error</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, .\_build\security_dispatcher.o(i.send_unexpected_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = send_unexpected_error &rArr; evt_send &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[256]"></a>events_send_from_err_code</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, .\_build\security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_evt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[258]"></a>evt_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\security_manager.o(i.evt_send))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[27b]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire &rArr; nrf_atflags_find_and_set_flag &rArr; nrf_atflags_fetch_set &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[27c]"></a>flags_set_from_err_code</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\_build\security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; flag_toggle &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[2c1]"></a>link_secure</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, .\_build\security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_req_process
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_handle
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_link_secure
</UL>

<P><STRONG><a name="[67]"></a>link_secure_pending_handle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\_build\security_manager.o(i.link_secure_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = link_secure_pending_handle &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[2c2]"></a>new_context_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\security_manager.o(i.new_context_get))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[257]"></a>new_evt</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, .\_build\security_manager.o(i.new_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = new_evt &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
</UL>

<P><STRONG><a name="[66]"></a>params_reply_pending_handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\security_manager.o(i.params_reply_pending_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = params_reply_pending_handle &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>
<BR>[Address Reference Count : 2]<UL><LI> security_manager.o(i.sm_ble_evt_handler)
<LI> security_manager.o(i.sm_pdb_evt_handler)
</UL>
<P><STRONG><a name="[2c3]"></a>params_req_send</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, .\_build\security_manager.o(i.params_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = params_req_send &rArr; new_evt &rArr; im_peer_id_get_by_conn_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_evt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[415]"></a>sec_params_verify</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, .\_build\security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[40d]"></a>sec_req_process</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, .\_build\security_manager.o(i.sec_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sec_req_process &rArr; link_secure &rArr; events_send_from_err_code &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_is_sufficient
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[3a4]"></a>smd_params_reply_perform</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\_build\security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_keyset_fill &rArr; pdb_write_buf_get &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_lesc_public_key_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_req_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_context_get
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_handle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[1bb]"></a>char_add</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, .\_build\ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = char_add &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[1bd]"></a>pnp_id_encode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\_build\ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = pnp_id_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[1bc]"></a>sys_id_encode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, .\_build\ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = sys_id_encode &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[1d9]"></a>ctrlpt_rsp_encode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\_build\ble_sc_ctrlpt.o(i.ctrlpt_rsp_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ctrlpt_rsp_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_rsp_send
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>

<P><STRONG><a name="[1d7]"></a>on_ctrlpt_write</STRONG> (Thumb, 466 bytes, Stack size 112 bytes, .\_build\ble_sc_ctrlpt.o(i.on_ctrlpt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = on_ctrlpt_write &rArr; sc_ctrlpt_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_ctrlpt_resp_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlpt_rsp_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_on_ble_evt
</UL>

<P><STRONG><a name="[1d6]"></a>sc_ctrlpt_resp_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, .\_build\ble_sc_ctrlpt.o(i.sc_ctrlpt_resp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sc_ctrlpt_resp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sc_ctrlpt_on_ble_evt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ctrlpt_write
</UL>

<P><STRONG><a name="[291]"></a>generate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, .\_build\nrf_crypto_rng.o(i.generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_vector_generate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_reseed
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_vector_generate
</UL>

<P><STRONG><a name="[294]"></a>generate_in_range</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, .\_build\nrf_crypto_rng.o(i.generate_in_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = generate_in_range &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_vector_generate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_vector_greater_or_equal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_vector_generate_in_range
</UL>

<P><STRONG><a name="[295]"></a>is_vector_greater_or_equal</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, .\_build\nrf_crypto_rng.o(i.is_vector_greater_or_equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_vector_greater_or_equal
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_in_range
</UL>

<P><STRONG><a name="[336]"></a>nrf_stack_info_overflowed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrf_crypto_rng.o(i.nrf_stack_info_overflowed))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_reseed
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>

<P><STRONG><a name="[327]"></a>oberon_vector_generate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\oberon_backend_ecc.o(i.oberon_vector_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = oberon_vector_generate &rArr; nrf_crypto_rng_vector_generate &rArr; generate &rArr; nrf_crypto_rng_backend_vector_generate &rArr; mbedtls_ctr_drbg_random &rArr; mbedtls_ctr_drbg_random_with_add &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_vector_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_ed25519_key_pair_generate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_backend_curve25519_key_pair_generate
</UL>

<P><STRONG><a name="[97]"></a>nrf_hw_backend_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrf_hw_backend_init.o(i.nrf_hw_backend_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = nrf_hw_backend_init &rArr; nrf_crypto_rng_init &rArr; nrf_crypto_rng_backend_init &rArr; mbedtls_ctr_drbg_seed &rArr; mbedtls_ctr_drbg_seed_entropy_len &rArr; mbedtls_ctr_drbg_reseed &rArr; block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_hw_backend_init.o(crypto_data)
</UL>
<P><STRONG><a name="[98]"></a>nrf_hw_backend_uninit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\nrf_hw_backend_init.o(i.nrf_hw_backend_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_hw_backend_uninit &rArr; nrf_crypto_rng_uninit &rArr; nrf_crypto_rng_backend_uninit &rArr; nrf_drv_rng_uninit &rArr; nrf_queue_reset &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_hw_backend_init.o(crypto_data)
</UL>
<P><STRONG><a name="[49]"></a>entropy_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\_build\nrf_hw_backend_rng_mbedtls.o(i.entropy_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = entropy_callback &rArr; nrf_drv_rng_block_rand &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_block_rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_hw_backend_rng_mbedtls.o(i.nrf_crypto_rng_backend_init)
</UL>
<P><STRONG><a name="[331]"></a>result_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\_build\nrf_hw_backend_rng_mbedtls.o(i.result_get))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_vector_generate
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_reseed
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_crypto_rng_backend_init
</UL>

<P><STRONG><a name="[232]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\_build\nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[4a]"></a>clock_irq_handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[b4]"></a>sd_state_evt_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\_build\nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[ad]"></a>soc_evt_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[4b]"></a>nrfx_rng_handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\_build\nrf_drv_rng.o(i.nrfx_rng_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrfx_rng_handler &rArr; nrf_queue_push &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_stop
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_rng.o(i.nrf_drv_rng_init)
<LI> nrf_drv_rng.o(i.sd_state_evt_handler)
</UL>
<P><STRONG><a name="[b5]"></a>sd_state_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\_build\nrf_drv_rng.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sd_state_evt_handler &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_uninit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_stop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_rng.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[4e]"></a>uart_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\_build\nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[4d]"></a>uarte_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\_build\nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[11b]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[387]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[385]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, .\_build\nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[114]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[386]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[116]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, .\_build\nrfx_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[383]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[384]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[389]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[16a]"></a>apply_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\_build\nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[357]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[356]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\_build\nrfx_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[16c]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\_build\nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[16b]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\_build\nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[39a]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[396]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[41c]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[408]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, .\_build\nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[41d]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, .\_build\nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[399]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[41e]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\_build\nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[395]"></a>uart_irq_handler</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, .\_build\nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[16d]"></a>apply_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, .\_build\nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[2bd]"></a>interrupts_enable</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, .\_build\nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[359]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[358]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\_build\nrfx_uarte.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[16f]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\_build\nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[16e]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\_build\nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[39f]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[2be]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[39d]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[41f]"></a>rx_done_event</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, .\_build\nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[420]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, .\_build\nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[39b]"></a>uarte_irq_handler</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, .\_build\nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[35c]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\_build\nrfx_spim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[35b]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\_build\nrfx_spim.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[122]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[123]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[121]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[419]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrfx_spim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[394]"></a>spim_xfer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, .\_build\nrfx_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[4c]"></a>spim_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\_build\nrf_drv_spi.o(i.spim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[38c]"></a>configure_pins</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, .\_build\nrfx_pwm.o(i.configure_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = configure_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
</UL>

<P><STRONG><a name="[11d]"></a>irq_handler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, .\_build\nrfx_pwm.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>nrf_pwm_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrfx_pwm.o(i.nrf_pwm_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[2c0]"></a>nrf_pwm_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\nrfx_pwm.o(i.nrf_pwm_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwm_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_init
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_playback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[38e]"></a>nrf_pwm_sequence_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, .\_build\nrfx_pwm.o(i.nrf_pwm_sequence_set))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
</UL>

<P><STRONG><a name="[38f]"></a>start_playback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\_build\nrfx_pwm.o(i.start_playback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_playback &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_pwm_simple_playback
</UL>

<P><STRONG><a name="[120]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrfx_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[391]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\nrfx_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
</UL>

<P><STRONG><a name="[11e]"></a>nrf_saadc_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\nrfx_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrfx_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[393]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\nrfx_saadc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample_convert
</UL>

<P><STRONG><a name="[2a4]"></a>button_get</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, .\_build\app_button.o(i.button_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = button_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usr_event
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[38]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, .\_build\app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = detection_delay_timeout_handler &rArr; evt_handle &rArr; usr_event &rArr; button_get
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[37]"></a>gpiote_event_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\_build\app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpiote_event_handler &rArr; timer_start &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[259]"></a>state_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\_build\app_button.o(i.state_set))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
</UL>

<P><STRONG><a name="[247]"></a>timer_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\_build\app_button.o(i.timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_start &rArr; app_timer_start &rArr; timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[25a]"></a>usr_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\app_button.o(i.usr_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usr_event &rArr; button_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_get
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_handle
</UL>

<P><STRONG><a name="[8b]"></a>compare_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\app_timer2.o(i.compare_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compare_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>get_now</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, .\_build\app_timer2.o(i.get_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_now
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[39]"></a>rtc_irq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\_build\app_timer2.o(i.rtc_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rtc_irq &rArr; rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer2.o(i.app_timer_init)
</UL>
<P><STRONG><a name="[3e6]"></a>rtc_schedule</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\_build\app_timer2.o(i.rtc_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_disable
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expire
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3e5]"></a>rtc_update</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, .\_build\app_timer2.o(i.rtc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtc_update &rArr; rtc_schedule &rArr; drv_rtc_windowed_compare_set &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_peek
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_stop
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3ea]"></a>sortlist_pop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\app_timer2.o(i.sortlist_pop))
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_req_process
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_update
</UL>

<P><STRONG><a name="[3e3]"></a>timer_expire</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\_build\app_timer2.o(i.timer_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_expire &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_now
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_schedule
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[3e4]"></a>timer_req_process</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, .\_build\app_timer2.o(i.timer_req_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_process &rArr; nrf_sortlist_add
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_remove
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sortlist_add
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sortlist_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_irq
</UL>

<P><STRONG><a name="[167]"></a>timer_req_schedule</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\_build\app_timer2.o(i.timer_req_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_req_schedule &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_irq_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[24c]"></a>evt_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.evt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_enable
</UL>

<P><STRONG><a name="[24a]"></a>evt_pending</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\drv_rtc.o(i.evt_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_pending &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_overflow_pending
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_pending
</UL>

<P><STRONG><a name="[24b]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\_build\drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_pending
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_compare_set
</UL>

<P><STRONG><a name="[24f]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\drv_rtc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_rtc_windowed_compare_set
</UL>

<P><STRONG><a name="[241]"></a>delete_execute</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, .\_build\fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = delete_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3db]"></a>event_prepare</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, .\_build\fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[268]"></a>event_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\_build\fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3]"></a>fs_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\_build\fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[280]"></a>gc_execute</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, .\_build\fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[282]"></a>gc_next_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, .\_build\fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[285]"></a>gc_page_erase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, .\_build\fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = gc_page_erase &rArr; nrf_fstorage_erase &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[284]"></a>gc_record_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\_build\fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[283]"></a>gc_record_find_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[281]"></a>gc_state_advance</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, .\_build\fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gc_state_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[3a2]"></a>header_check</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, .\_build\fds.o(i.header_check))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;records_stat
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[3a3]"></a>header_has_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\_build\fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;records_stat
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[2b5]"></a>init_execute</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, .\_build\fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = init_execute &rArr; page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3dd]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[275]"></a>page_identify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, .\_build\fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_stat
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[426]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\_build\fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[3a1]"></a>page_scan</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\_build\fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[286]"></a>page_tag_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\_build\fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[287]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[26a]"></a>pages_init</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, .\_build\fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[263]"></a>queue_buf_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[264]"></a>queue_buf_store</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[27d]"></a>queue_process</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, .\_build\fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[265]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\_build\fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[244]"></a>record_find</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, .\_build\fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[242]"></a>record_find_by_desc</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, .\_build\fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[288]"></a>record_find_next</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\_build\fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[243]"></a>record_header_flag_dirty</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[276]"></a>records_stat</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, .\_build\fds.o(i.records_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = records_stat
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_stat
</UL>

<P><STRONG><a name="[271]"></a>write_enqueue</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, .\_build\fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[3da]"></a>write_execute</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, .\_build\fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = write_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write &rArr; nrf_log_frontend_std_3 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[425]"></a>write_space_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[424]"></a>write_space_reserve</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, .\_build\fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[205]"></a>buffer_add</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\_build\nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2bb]"></a>int_print</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, .\_build\nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[2bc]"></a>unsigned_print</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, .\_build\nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[352]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
</UL>

<P><STRONG><a name="[351]"></a>addr_is_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[90]"></a>erase</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, .\_build\nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>event_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, .\_build\nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[8c]"></a>init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, .\_build\nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init &rArr; nrf_atfifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\_build\nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>queue_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\_build\nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[353]"></a>queue_process</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, .\_build\nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[254]"></a>queue_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\_build\nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[8e]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\_build\nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>uninit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\_build\nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>write</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, .\_build\nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[303]"></a>memobj_op</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, .\_build\nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[374]"></a>shutdown_process</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, .\_build\nrf_pwr_mgmt.o(i.shutdown_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = shutdown_process &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
</UL>

<P><STRONG><a name="[3dc]"></a>continous_items_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\_build\nrf_queue.o(i.continous_items_get))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>

<P><STRONG><a name="[377]"></a>nrf_queue_next_idx</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\_build\nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[379]"></a>queue_read</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, .\_build\nrf_queue.o(i.queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continous_items_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
</UL>

<P><STRONG><a name="[378]"></a>queue_utilization_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\_build\nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[381]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\_build\nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[34c]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\_build\nrf_log_backend_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_uart_uninit &rArr; nrfx_uarte_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[96]"></a>nrf_log_backend_uart_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>nrf_log_backend_uart_panic_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = nrf_log_backend_uart_panic_set &rArr; uart_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>nrf_log_backend_uart_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrf_log_backend_uart.o(i.nrf_log_backend_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_log_backend_uart_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>serial_tx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, .\_build\nrf_log_backend_uart.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = serial_tx &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.nrf_log_backend_uart_put)
</UL>
<P><STRONG><a name="[6d]"></a>uart_evt_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\_build\nrf_log_backend_uart.o(i.uart_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_uart.o(i.uart_init)
</UL>
<P><STRONG><a name="[364]"></a>uart_init</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, .\_build\nrf_log_backend_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = uart_init &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_uart_panic_set
</UL>

<P><STRONG><a name="[1f6]"></a>buf_prealloc</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, .\_build\nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[248]"></a>dropped_sat16_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\_build\nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[2e7]"></a>invalid_packets_omit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, .\_build\nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[1f9]"></a>log_skip</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, .\_build\nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[369]"></a>std_n</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, .\_build\nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_5
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_3
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>

<P><STRONG><a name="[36d]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\_build\nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[36b]"></a>prefix_process</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, .\_build\nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr;  buffer_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[417]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, .\_build\nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
</UL>

<P><STRONG><a name="[37d]"></a>sdh_request_observer_notify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, .\_build\nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[37e]"></a>sdh_state_observer_notify</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, .\_build\nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[37f]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\_build\nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[380]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, .\_build\nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[b0]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 96 bytes, Stack size 528 bytes, .\_build\nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 804<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[b1]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\_build\nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[b2]"></a>nrf_sdh_ant_evts_poll</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, .\_build\nrf_sdh_ant.o(i.nrf_sdh_ant_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = nrf_sdh_ant_evts_poll &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ant.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[1e3]"></a>block_cipher_df</STRONG> (Thumb, 280 bytes, Stack size 832 bytes, .\_build\ctr_drbg.o(i.block_cipher_df))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = block_cipher_df &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_free
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[23b]"></a>ctr_drbg_update_internal</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, .\_build\ctr_drbg.o(i.ctr_drbg_update_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ctr_drbg_update_internal &rArr; mbedtls_aes_crypt_ecb &rArr; mbedtls_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_setkey_enc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_aes_crypt_ecb
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_reseed
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbedtls_ctr_drbg_random_with_add
</UL>

<P><STRONG><a name="[3c]"></a>dummy_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\_build\ble_dfu.o(i.dummy_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dummy_evt_handler &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_dfu.o(i.ble_dfu_buttonless_init)
</UL>
<P><STRONG><a name="[1b6]"></a>on_ctrlpt_write</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, .\_build\ble_dfu.o(i.on_ctrlpt_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_ctrlpt_write &rArr; ble_dfu_buttonless_on_ctrl_pt_write &rArr; ble_dfu_buttonless_resp_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_indication_enabled
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ctrl_pt_write
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_buttonless_on_ble_evt
</UL>

<P><STRONG><a name="[142]"></a>ant_hrm_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\_build\ant_hrm.o(i.ant_hrm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ant_hrm_init &rArr; ant_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_sens_init
</UL>

<P><STRONG><a name="[14e]"></a>ant_message_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\_build\ant_hrm.o(i.ant_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ant_message_send &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sens_message_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_sens_open
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_sens_evt_handler
</UL>

<P><STRONG><a name="[151]"></a>sens_message_encode</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, .\_build\ant_hrm.o(i.sens_message_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = sens_message_encode &rArr; ant_hrm_page_1_encode &rArr; page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_4_encode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_3_encode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_2_encode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_1_encode
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_0_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_message_send
</UL>

<P><STRONG><a name="[147]"></a>page1_data_log</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\_build\ant_hrm_page_1.o(i.page1_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = page1_data_log &rArr; nrf_log_frontend_std_4 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_1_encode
</UL>

<P><STRONG><a name="[149]"></a>page2_data_log</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, .\_build\ant_hrm_page_2.o(i.page2_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = page2_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_2_encode
</UL>

<P><STRONG><a name="[14b]"></a>page3_data_log</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\_build\ant_hrm_page_3.o(i.page3_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = page3_data_log &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_3_encode
</UL>

<P><STRONG><a name="[14d]"></a>page4_data_log</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\_build\ant_hrm_page_4.o(i.page4_data_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = page4_data_log &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ant_hrm_page_4_encode
</UL>

<P><STRONG><a name="[9c]"></a>ant_evt_handler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, .\_build\ant_state_indicator.o(i.ant_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ant_evt_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_shutdown
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ant_state_indicator.o(sdh_ant_observers1)
</UL>
<P><STRONG><a name="[9a]"></a>m_shutdown_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\_build\ant_state_indicator.o(i.m_shutdown_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = m_shutdown_handler &rArr; app_error_handler &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_5 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ant_state_indicator.o(pwr_mgmt_data1)
</UL>
<P><STRONG><a name="[105]"></a>sha512_blocks</STRONG> (Thumb, 896 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sha512.c.obj)(.text.sha512_blocks))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512_loop2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512_loop1
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512
</UL>

<P><STRONG><a name="[104]"></a>sha512_blocks.constprop.1</STRONG> (Thumb, 784 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_sha512.c.obj)(.text.sha512_blocks.constprop.1))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512_loop2
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512_loop1
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_sha512
</UL>

<P><STRONG><a name="[ec]"></a>p256_zdblu</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.p256_zdblu))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_sub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_mul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_square
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[ef]"></a>p256_zaddc</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.p256_zaddc))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_sub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_mul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_square
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[ee]"></a>p256_zaddu</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_curve_p256.c.obj)(.text.p256_zaddu))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_sub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_mul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod_p256_square
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_curve_p256_scalarmult
</UL>

<P><STRONG><a name="[d3]"></a>mixaddsub_p1p1</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.mixaddsub_p1p1))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_sub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_add
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cswap256
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.2
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.0
</UL>

<P><STRONG><a name="[d7]"></a>dbl_p1p1</STRONG> (Thumb, 134 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.dbl_p1p1))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_neg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_square
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_sub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[d1]"></a>get_entry</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.get_entry))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cadd256
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.1
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.0
</UL>

<P><STRONG><a name="[d6]"></a>get_entry.constprop.3</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.get_entry.constprop.3))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cadd256
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_entry.constprop.2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[d0]"></a>add_entry.constprop.0</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.add_entry.constprop.0))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[d4]"></a>add_entry.constprop.1</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.add_entry.constprop.1))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[d5]"></a>add_entry.constprop.2</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_ge25519.c.obj)(.text.add_entry.constprop.2))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry.constprop.3
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixaddsub_p1p1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_mod25519_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_ge25519_scalarmult_base
</UL>

<P><STRONG><a name="[bd]"></a>cswap64</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ..\..\external\nrf_oberon\lib\cortex-m4\hard-float\short-wchar\oberon_3.0.1.lib(ocrypto_bigint256.s.obj)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ocrypto_bigint_cswap256
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
